{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar ScalarObservable_1 = require('./ScalarObservable');\nvar EmptyObservable_1 = require('./EmptyObservable');\nvar isScheduler_1 = require('../util/isScheduler');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ArrayObservable = function (_super) {\n  __extends(ArrayObservable, _super);\n  function ArrayObservable(array, scheduler) {\n    _super.call(this);\n    this.array = array;\n    this.scheduler = scheduler;\n    if (!scheduler && array.length === 1) {\n      this._isScalar = true;\n      this.value = array[0];\n    }\n  }\n  ArrayObservable.create = function (array, scheduler) {\n    return new ArrayObservable(array, scheduler);\n  };\n  /**\n   * Creates an Observable that emits some values you specify as arguments,\n   * immediately one after the other, and then emits a complete notification.\n   *\n   * <span class=\"informal\">Emits the arguments you provide, then completes.\n   * </span>\n   *\n   * <img src=\"./img/of.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the arguments given, and the complete notification thereafter. It can\n   * be used for composing with other Observables, such as with {@link concat}.\n   * By default, it uses a `null` IScheduler, which means the `next`\n   * notifications are sent synchronously, although with a different IScheduler\n   * it is possible to determine when those notifications will be delivered.\n   *\n   * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n   * var numbers = Rx.Observable.of(10, 20, 30);\n   * var letters = Rx.Observable.of('a', 'b', 'c');\n   * var interval = Rx.Observable.interval(1000);\n   * var result = numbers.concat(letters).concat(interval);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link throw}\n   *\n   * @param {...T} values Arguments that represent `next` values to be emitted.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the `next` notifications.\n   * @return {Observable<T>} An Observable that emits each given input value.\n   * @static true\n   * @name of\n   * @owner Observable\n   */\n  ArrayObservable.of = function () {\n    var array = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      array[_i - 0] = arguments[_i];\n    }\n    var scheduler = array[array.length - 1];\n    if (isScheduler_1.isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n    var len = array.length;\n    if (len > 1) {\n      return new ArrayObservable(array, scheduler);\n    } else if (len === 1) {\n      return new ScalarObservable_1.ScalarObservable(array[0], scheduler);\n    } else {\n      return new EmptyObservable_1.EmptyObservable(scheduler);\n    }\n  };\n  ArrayObservable.dispatch = function (state) {\n    var array = state.array,\n      index = state.index,\n      count = state.count,\n      subscriber = state.subscriber;\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n    subscriber.next(array[index]);\n    if (subscriber.closed) {\n      return;\n    }\n    state.index = index + 1;\n    this.schedule(state);\n  };\n  /** @deprecated internal use only */\n  ArrayObservable.prototype._subscribe = function (subscriber) {\n    var index = 0;\n    var array = this.array;\n    var count = array.length;\n    var scheduler = this.scheduler;\n    if (scheduler) {\n      return scheduler.schedule(ArrayObservable.dispatch, 0, {\n        array: array,\n        index: index,\n        count: count,\n        subscriber: subscriber\n      });\n    } else {\n      for (var i = 0; i < count && !subscriber.closed; i++) {\n        subscriber.next(array[i]);\n      }\n      subscriber.complete();\n    }\n  };\n  return ArrayObservable;\n}(Observable_1.Observable);\nexports.ArrayObservable = ArrayObservable;","map":{"version":3,"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","Observable_1","require","ScalarObservable_1","EmptyObservable_1","isScheduler_1","ArrayObservable","_super","array","scheduler","call","length","_isScalar","value","of","_i","arguments","isScheduler","pop","len","ScalarObservable","EmptyObservable","dispatch","state","index","count","subscriber","complete","next","closed","schedule","_subscribe","i","Observable","exports"],"sources":["C:/Users/Montg/Documents/Final Year/APDS/POE/POE/node_modules/rxjs/observable/ArrayObservable.js"],"sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar ScalarObservable_1 = require('./ScalarObservable');\nvar EmptyObservable_1 = require('./EmptyObservable');\nvar isScheduler_1 = require('../util/isScheduler');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ArrayObservable = (function (_super) {\n    __extends(ArrayObservable, _super);\n    function ArrayObservable(array, scheduler) {\n        _super.call(this);\n        this.array = array;\n        this.scheduler = scheduler;\n        if (!scheduler && array.length === 1) {\n            this._isScalar = true;\n            this.value = array[0];\n        }\n    }\n    ArrayObservable.create = function (array, scheduler) {\n        return new ArrayObservable(array, scheduler);\n    };\n    /**\n     * Creates an Observable that emits some values you specify as arguments,\n     * immediately one after the other, and then emits a complete notification.\n     *\n     * <span class=\"informal\">Emits the arguments you provide, then completes.\n     * </span>\n     *\n     * <img src=\"./img/of.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the arguments given, and the complete notification thereafter. It can\n     * be used for composing with other Observables, such as with {@link concat}.\n     * By default, it uses a `null` IScheduler, which means the `next`\n     * notifications are sent synchronously, although with a different IScheduler\n     * it is possible to determine when those notifications will be delivered.\n     *\n     * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n     * var numbers = Rx.Observable.of(10, 20, 30);\n     * var letters = Rx.Observable.of('a', 'b', 'c');\n     * var interval = Rx.Observable.interval(1000);\n     * var result = numbers.concat(letters).concat(interval);\n     * result.subscribe(x => console.log(x));\n     *\n     * @see {@link create}\n     * @see {@link empty}\n     * @see {@link never}\n     * @see {@link throw}\n     *\n     * @param {...T} values Arguments that represent `next` values to be emitted.\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emissions of the `next` notifications.\n     * @return {Observable<T>} An Observable that emits each given input value.\n     * @static true\n     * @name of\n     * @owner Observable\n     */\n    ArrayObservable.of = function () {\n        var array = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            array[_i - 0] = arguments[_i];\n        }\n        var scheduler = array[array.length - 1];\n        if (isScheduler_1.isScheduler(scheduler)) {\n            array.pop();\n        }\n        else {\n            scheduler = null;\n        }\n        var len = array.length;\n        if (len > 1) {\n            return new ArrayObservable(array, scheduler);\n        }\n        else if (len === 1) {\n            return new ScalarObservable_1.ScalarObservable(array[0], scheduler);\n        }\n        else {\n            return new EmptyObservable_1.EmptyObservable(scheduler);\n        }\n    };\n    ArrayObservable.dispatch = function (state) {\n        var array = state.array, index = state.index, count = state.count, subscriber = state.subscriber;\n        if (index >= count) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(array[index]);\n        if (subscriber.closed) {\n            return;\n        }\n        state.index = index + 1;\n        this.schedule(state);\n    };\n    /** @deprecated internal use only */ ArrayObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var array = this.array;\n        var count = array.length;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(ArrayObservable.dispatch, 0, {\n                array: array, index: index, count: count, subscriber: subscriber\n            });\n        }\n        else {\n            for (var i = 0; i < count && !subscriber.closed; i++) {\n                subscriber.next(array[i]);\n            }\n            subscriber.complete();\n        }\n    };\n    return ArrayObservable;\n}(Observable_1.Observable));\nexports.ArrayObservable = ArrayObservable;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}