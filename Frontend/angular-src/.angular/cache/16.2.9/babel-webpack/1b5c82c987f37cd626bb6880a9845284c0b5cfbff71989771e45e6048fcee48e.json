{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nfunction mergeMap(project, resultSelector, concurrent) {\n  if (concurrent === void 0) {\n    concurrent = Number.POSITIVE_INFINITY;\n  }\n  return function mergeMapOperatorFunction(source) {\n    if (typeof resultSelector === 'number') {\n      concurrent = resultSelector;\n      resultSelector = null;\n    }\n    return source.lift(new MergeMapOperator(project, resultSelector, concurrent));\n  };\n}\nexports.mergeMap = mergeMap;\nvar MergeMapOperator = function () {\n  function MergeMapOperator(project, resultSelector, concurrent) {\n    if (concurrent === void 0) {\n      concurrent = Number.POSITIVE_INFINITY;\n    }\n    this.project = project;\n    this.resultSelector = resultSelector;\n    this.concurrent = concurrent;\n  }\n  MergeMapOperator.prototype.call = function (observer, source) {\n    return source.subscribe(new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));\n  };\n  return MergeMapOperator;\n}();\nexports.MergeMapOperator = MergeMapOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MergeMapSubscriber = function (_super) {\n  __extends(MergeMapSubscriber, _super);\n  function MergeMapSubscriber(destination, project, resultSelector, concurrent) {\n    if (concurrent === void 0) {\n      concurrent = Number.POSITIVE_INFINITY;\n    }\n    _super.call(this, destination);\n    this.project = project;\n    this.resultSelector = resultSelector;\n    this.concurrent = concurrent;\n    this.hasCompleted = false;\n    this.buffer = [];\n    this.active = 0;\n    this.index = 0;\n  }\n  MergeMapSubscriber.prototype._next = function (value) {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  };\n  MergeMapSubscriber.prototype._tryNext = function (value) {\n    var result;\n    var index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  };\n  MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {\n    this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));\n  };\n  MergeMapSubscriber.prototype._complete = function () {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  };\n  MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    if (this.resultSelector) {\n      this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  };\n  MergeMapSubscriber.prototype._notifyResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {\n    var result;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  };\n  MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {\n    var buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  };\n  return MergeMapSubscriber;\n}(OuterSubscriber_1.OuterSubscriber);\nexports.MergeMapSubscriber = MergeMapSubscriber;","map":{"version":3,"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","subscribeToResult_1","require","OuterSubscriber_1","mergeMap","project","resultSelector","concurrent","Number","POSITIVE_INFINITY","mergeMapOperatorFunction","source","lift","MergeMapOperator","exports","call","observer","subscribe","MergeMapSubscriber","_super","destination","hasCompleted","buffer","active","index","_next","value","_tryNext","push","result","err","error","_innerSub","ish","add","subscribeToResult","_complete","length","complete","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","_notifyResultSelector","next","notifyComplete","remove","shift","OuterSubscriber"],"sources":["C:/Users/Montg/Documents/Final Year/APDS/POE/POE/node_modules/rxjs/operators/mergeMap.js"],"sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nfunction mergeMap(project, resultSelector, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return function mergeMapOperatorFunction(source) {\n        if (typeof resultSelector === 'number') {\n            concurrent = resultSelector;\n            resultSelector = null;\n        }\n        return source.lift(new MergeMapOperator(project, resultSelector, concurrent));\n    };\n}\nexports.mergeMap = mergeMap;\nvar MergeMapOperator = (function () {\n    function MergeMapOperator(project, resultSelector, concurrent) {\n        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n    }\n    MergeMapOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));\n    };\n    return MergeMapOperator;\n}());\nexports.MergeMapOperator = MergeMapOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MergeMapSubscriber = (function (_super) {\n    __extends(MergeMapSubscriber, _super);\n    function MergeMapSubscriber(destination, project, resultSelector, concurrent) {\n        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n        _super.call(this, destination);\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    MergeMapSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            this._tryNext(value);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeMapSubscriber.prototype._tryNext = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.active++;\n        this._innerSub(result, value, index);\n    };\n    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {\n        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));\n    };\n    MergeMapSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n    };\n    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (this.resultSelector) {\n            this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            this.destination.next(innerValue);\n        }\n    };\n    MergeMapSubscriber.prototype._notifyResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var result;\n        try {\n            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return MergeMapSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.MergeMapSubscriber = MergeMapSubscriber;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}