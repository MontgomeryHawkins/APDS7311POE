{"ast":null,"code":"/**\n * @license Angular v4.4.7\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\nimport { Injectable, NgModule, Version } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { ÉµgetDOM } from '@angular/platform-browser';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A backend for http that uses the `XMLHttpRequest` browser API.\n *\n * Take care not to evaluate this in non-browser contexts.\n *\n * \\@experimental\n */\nclass BrowserXhr {\n  constructor() {}\n  /**\n   * @return {?}\n   */\n  build() {\n    return new XMLHttpRequest();\n  }\n}\nBrowserXhr.decorators = [{\n  type: Injectable\n}];\n/**\n * @nocollapse\n */\nBrowserXhr.ctorParameters = () => [];\nlet RequestMethod = {};\nRequestMethod.Get = 0;\nRequestMethod.Post = 1;\nRequestMethod.Put = 2;\nRequestMethod.Delete = 3;\nRequestMethod.Options = 4;\nRequestMethod.Head = 5;\nRequestMethod.Patch = 6;\nRequestMethod[RequestMethod.Get] = \"Get\";\nRequestMethod[RequestMethod.Post] = \"Post\";\nRequestMethod[RequestMethod.Put] = \"Put\";\nRequestMethod[RequestMethod.Delete] = \"Delete\";\nRequestMethod[RequestMethod.Options] = \"Options\";\nRequestMethod[RequestMethod.Head] = \"Head\";\nRequestMethod[RequestMethod.Patch] = \"Patch\";\nlet ReadyState = {};\nReadyState.Unsent = 0;\nReadyState.Open = 1;\nReadyState.HeadersReceived = 2;\nReadyState.Loading = 3;\nReadyState.Done = 4;\nReadyState.Cancelled = 5;\nReadyState[ReadyState.Unsent] = \"Unsent\";\nReadyState[ReadyState.Open] = \"Open\";\nReadyState[ReadyState.HeadersReceived] = \"HeadersReceived\";\nReadyState[ReadyState.Loading] = \"Loading\";\nReadyState[ReadyState.Done] = \"Done\";\nReadyState[ReadyState.Cancelled] = \"Cancelled\";\nlet ResponseType = {};\nResponseType.Basic = 0;\nResponseType.Cors = 1;\nResponseType.Default = 2;\nResponseType.Error = 3;\nResponseType.Opaque = 4;\nResponseType[ResponseType.Basic] = \"Basic\";\nResponseType[ResponseType.Cors] = \"Cors\";\nResponseType[ResponseType.Default] = \"Default\";\nResponseType[ResponseType.Error] = \"Error\";\nResponseType[ResponseType.Opaque] = \"Opaque\";\nlet ContentType = {};\nContentType.NONE = 0;\nContentType.JSON = 1;\nContentType.FORM = 2;\nContentType.FORM_DATA = 3;\nContentType.TEXT = 4;\nContentType.BLOB = 5;\nContentType.ARRAY_BUFFER = 6;\nContentType[ContentType.NONE] = \"NONE\";\nContentType[ContentType.JSON] = \"JSON\";\nContentType[ContentType.FORM] = \"FORM\";\nContentType[ContentType.FORM_DATA] = \"FORM_DATA\";\nContentType[ContentType.TEXT] = \"TEXT\";\nContentType[ContentType.BLOB] = \"BLOB\";\nContentType[ContentType.ARRAY_BUFFER] = \"ARRAY_BUFFER\";\nlet ResponseContentType = {};\nResponseContentType.Text = 0;\nResponseContentType.Json = 1;\nResponseContentType.ArrayBuffer = 2;\nResponseContentType.Blob = 3;\nResponseContentType[ResponseContentType.Text] = \"Text\";\nResponseContentType[ResponseContentType.Json] = \"Json\";\nResponseContentType[ResponseContentType.ArrayBuffer] = \"ArrayBuffer\";\nResponseContentType[ResponseContentType.Blob] = \"Blob\";\n\n/**\n * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\n * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\n *\n * The only known difference between this `Headers` implementation and the spec is the\n * lack of an `entries` method.\n *\n * ### Example\n *\n * ```\n * import {Headers} from '\\@angular/http';\n *\n * var firstHeaders = new Headers();\n * firstHeaders.append('Content-Type', 'image/jpeg');\n * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n *\n * // Create headers from Plain Old JavaScript Object\n * var secondHeaders = new Headers({\n *   'X-My-Custom-Header': 'Angular'\n * });\n * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n *\n * var thirdHeaders = new Headers(secondHeaders);\n * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n * ```\n *\n * \\@experimental\n */\nclass Headers {\n  /**\n   * @param {?=} headers\n   */\n  constructor(headers) {\n    /**\n     * \\@internal header names are lower case\n     */\n    this._headers = new Map();\n    /**\n     * \\@internal map lower case names to actual names\n     */\n    this._normalizedNames = new Map();\n    if (!headers) {\n      return;\n    }\n    if (headers instanceof Headers) {\n      headers.forEach((values, name) => {\n        values.forEach(value => this.append(name, value));\n      });\n      return;\n    }\n    Object.keys(headers).forEach(name => {\n      const values = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\n      this.delete(name);\n      values.forEach(value => this.append(name, value));\n    });\n  }\n  /**\n   * Returns a new Headers instance from the given DOMString of Response Headers\n   * @param {?} headersString\n   * @return {?}\n   */\n  static fromResponseHeaderString(headersString) {\n    const /** @type {?} */headers = new Headers();\n    headersString.split('\\n').forEach(line => {\n      const /** @type {?} */index = line.indexOf(':');\n      if (index > 0) {\n        const /** @type {?} */name = line.slice(0, index);\n        const /** @type {?} */value = line.slice(index + 1).trim();\n        headers.set(name, value);\n      }\n    });\n    return headers;\n  }\n  /**\n   * Appends a header to existing list of header values for a given header name.\n   * @param {?} name\n   * @param {?} value\n   * @return {?}\n   */\n  append(name, value) {\n    const /** @type {?} */values = this.getAll(name);\n    if (values === null) {\n      this.set(name, value);\n    } else {\n      values.push(value);\n    }\n  }\n  /**\n   * Deletes all header values for the given name.\n   * @param {?} name\n   * @return {?}\n   */\n  delete(name) {\n    const /** @type {?} */lcName = name.toLowerCase();\n    this._normalizedNames.delete(lcName);\n    this._headers.delete(lcName);\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  forEach(fn) {\n    this._headers.forEach((values, lcName) => fn(values, this._normalizedNames.get(lcName), this._headers));\n  }\n  /**\n   * Returns first header that matches given name.\n   * @param {?} name\n   * @return {?}\n   */\n  get(name) {\n    const /** @type {?} */values = this.getAll(name);\n    if (values === null) {\n      return null;\n    }\n    return values.length > 0 ? values[0] : null;\n  }\n  /**\n   * Checks for existence of header by given name.\n   * @param {?} name\n   * @return {?}\n   */\n  has(name) {\n    return this._headers.has(name.toLowerCase());\n  }\n  /**\n   * Returns the names of the headers\n   * @return {?}\n   */\n  keys() {\n    return Array.from(this._normalizedNames.values());\n  }\n  /**\n   * Sets or overrides header value for given name.\n   * @param {?} name\n   * @param {?} value\n   * @return {?}\n   */\n  set(name, value) {\n    if (Array.isArray(value)) {\n      if (value.length) {\n        this._headers.set(name.toLowerCase(), [value.join(',')]);\n      }\n    } else {\n      this._headers.set(name.toLowerCase(), [value]);\n    }\n    this.mayBeSetNormalizedName(name);\n  }\n  /**\n   * Returns values of all headers.\n   * @return {?}\n   */\n  values() {\n    return Array.from(this._headers.values());\n  }\n  /**\n   * @return {?}\n   */\n  toJSON() {\n    const /** @type {?} */serialized = {};\n    this._headers.forEach((values, name) => {\n      const /** @type {?} */split = [];\n      values.forEach(v => split.push(...v.split(',')));\n      serialized[this._normalizedNames.get(name)] = split;\n    });\n    return serialized;\n  }\n  /**\n   * Returns list of header values for a given name.\n   * @param {?} name\n   * @return {?}\n   */\n  getAll(name) {\n    return this.has(name) ? this._headers.get(name.toLowerCase()) || null : null;\n  }\n  /**\n   * This method is not implemented.\n   * @return {?}\n   */\n  entries() {\n    throw new Error('\"entries\" method is not implemented on Headers class');\n  }\n  /**\n   * @param {?} name\n   * @return {?}\n   */\n  mayBeSetNormalizedName(name) {\n    const /** @type {?} */lcName = name.toLowerCase();\n    if (!this._normalizedNames.has(lcName)) {\n      this._normalizedNames.set(lcName, name);\n    }\n  }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates a response options object to be optionally provided when instantiating a\n * {\\@link Response}.\n *\n * This class is based on the `ResponseInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#responseinit).\n *\n * All values are null by default. Typical defaults can be found in the\n * {\\@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\n *\n * This class may be used in tests to build {\\@link Response Responses} for\n * mock responses (see {\\@link MockBackend}).\n *\n * ### Example ([live demo](http://plnkr.co/edit/P9Jkk8e8cz6NVzbcxEsD?p=preview))\n *\n * ```typescript\n * import {ResponseOptions, Response} from '\\@angular/http';\n *\n * var options = new ResponseOptions({\n *   body: '{\"name\":\"Jeff\"}'\n * });\n * var res = new Response(options);\n *\n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * ```\n *\n * \\@experimental\n */\nclass ResponseOptions {\n  /**\n   * @param {?=} opts\n   */\n  constructor(opts = {}) {\n    const {\n      body,\n      status,\n      headers,\n      statusText,\n      type,\n      url\n    } = opts;\n    this.body = body != null ? body : null;\n    this.status = status != null ? status : null;\n    this.headers = headers != null ? headers : null;\n    this.statusText = statusText != null ? statusText : null;\n    this.type = type != null ? type : null;\n    this.url = url != null ? url : null;\n  }\n  /**\n   * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n   * override\n   * existing values. This method will not change the values of the instance on which it is being\n   * called.\n   *\n   * This may be useful when sharing a base `ResponseOptions` object inside tests,\n   * where certain properties may change from test to test.\n   *\n   * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n   *\n   * ```typescript\n   * import {ResponseOptions, Response} from '\\@angular/http';\n   *\n   * var options = new ResponseOptions({\n   *   body: {name: 'Jeff'}\n   * });\n   * var res = new Response(options.merge({\n   *   url: 'https://google.com'\n   * }));\n   * console.log('options.url:', options.url); // null\n   * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n   * console.log('res.url:', res.url); // https://google.com\n   * ```\n   * @param {?=} options\n   * @return {?}\n   */\n  merge(options) {\n    return new ResponseOptions({\n      body: options && options.body != null ? options.body : this.body,\n      status: options && options.status != null ? options.status : this.status,\n      headers: options && options.headers != null ? options.headers : this.headers,\n      statusText: options && options.statusText != null ? options.statusText : this.statusText,\n      type: options && options.type != null ? options.type : this.type,\n      url: options && options.url != null ? options.url : this.url\n    });\n  }\n}\n/**\n * Subclass of {\\@link ResponseOptions}, with default values.\n *\n * Default values:\n *  * status: 200\n *  * headers: empty {\\@link Headers} object\n *\n * This class could be extended and bound to the {\\@link ResponseOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create {\\@link Response Responses}.\n *\n * ### Example ([live demo](http://plnkr.co/edit/qv8DLT?p=preview))\n *\n * ```typescript\n * import {provide} from '\\@angular/core';\n * import {bootstrap} from '\\@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\n * '\\@angular/http';\n * import {App} from './myapp';\n *\n * class MyOptions extends BaseResponseOptions {\n *   headers:Headers = new Headers({network: 'github'});\n * }\n *\n * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\n * ```\n *\n * The options could also be extended when manually creating a {\\@link Response}\n * object.\n *\n * ### Example ([live demo](http://plnkr.co/edit/VngosOWiaExEtbstDoix?p=preview))\n *\n * ```\n * import {BaseResponseOptions, Response} from '\\@angular/http';\n *\n * var options = new BaseResponseOptions();\n * var res = new Response(options.merge({\n *   body: 'Angular',\n *   headers: new Headers({framework: 'angular'})\n * }));\n * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\n * console.log('res.text():', res.text()); // Angular;\n * ```\n *\n * \\@experimental\n */\nclass BaseResponseOptions extends ResponseOptions {\n  constructor() {\n    super({\n      status: 200,\n      statusText: 'Ok',\n      type: ResponseType.Default,\n      headers: new Headers()\n    });\n  }\n}\nBaseResponseOptions.decorators = [{\n  type: Injectable\n}];\n/**\n * @nocollapse\n */\nBaseResponseOptions.ctorParameters = () => [];\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Abstract class from which real backends are derived.\n *\n * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given\n * {\\@link Request}.\n *\n * \\@experimental\n * @abstract\n */\nclass ConnectionBackend {\n  /**\n   * @abstract\n   * @param {?} request\n   * @return {?}\n   */\n  createConnection(request) {}\n}\n/**\n * Abstract class from which real connections are derived.\n *\n * \\@experimental\n * @abstract\n */\nclass Connection {}\n/**\n * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.\n *\n * \\@experimental\n * @abstract\n */\nclass XSRFStrategy {\n  /**\n   * @abstract\n   * @param {?} req\n   * @return {?}\n   */\n  configureRequest(req) {}\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} method\n * @return {?}\n */\nfunction normalizeMethodName(method) {\n  if (typeof method !== 'string') return method;\n  switch (method.toUpperCase()) {\n    case 'GET':\n      return RequestMethod.Get;\n    case 'POST':\n      return RequestMethod.Post;\n    case 'PUT':\n      return RequestMethod.Put;\n    case 'DELETE':\n      return RequestMethod.Delete;\n    case 'OPTIONS':\n      return RequestMethod.Options;\n    case 'HEAD':\n      return RequestMethod.Head;\n    case 'PATCH':\n      return RequestMethod.Patch;\n  }\n  throw new Error(`Invalid request method. The method \"${method}\" is not supported.`);\n}\nconst isSuccess = status => status >= 200 && status < 300;\n/**\n * @param {?} xhr\n * @return {?}\n */\nfunction getResponseURL(xhr) {\n  if ('responseURL' in xhr) {\n    return xhr.responseURL;\n  }\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n  return null;\n}\n/**\n * @param {?} input\n * @return {?}\n */\n\n/**\n * @param {?} input\n * @return {?}\n */\nfunction stringToArrayBuffer(input) {\n  const /** @type {?} */view = new Uint16Array(input.length);\n  for (let /** @type {?} */i = 0, /** @type {?} */strLen = input.length; i < strLen; i++) {\n    view[i] = input.charCodeAt(i);\n  }\n  return view.buffer;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @param {?=} rawParams\n * @return {?}\n */\nfunction paramParser(rawParams = '') {\n  const /** @type {?} */map = new Map();\n  if (rawParams.length > 0) {\n    const /** @type {?} */params = rawParams.split('&');\n    params.forEach(param => {\n      const /** @type {?} */eqIdx = param.indexOf('=');\n      const [key, val] = eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)];\n      const /** @type {?} */list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n  return map;\n}\n/**\n * \\@experimental\n *\n */\nclass QueryEncoder {\n  /**\n   * @param {?} k\n   * @return {?}\n   */\n  encodeKey(k) {\n    return standardEncoding(k);\n  }\n  /**\n   * @param {?} v\n   * @return {?}\n   */\n  encodeValue(v) {\n    return standardEncoding(v);\n  }\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction standardEncoding(v) {\n  return encodeURIComponent(v).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/gi, '$').replace(/%2C/gi, ',').replace(/%3B/gi, ';').replace(/%2B/gi, '+').replace(/%3D/gi, '=').replace(/%3F/gi, '?').replace(/%2F/gi, '/');\n}\n/**\n * Map-like representation of url search parameters, based on\n * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n * with several extensions for merging URLSearchParams objects:\n *   - setAll()\n *   - appendAll()\n *   - replaceAll()\n *\n * This class accepts an optional second parameter of ${\\@link QueryEncoder},\n * which is used to serialize parameters before making a request. By default,\n * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\n * and then un-encodes certain characters that are allowed to be part of the query\n * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\n *\n * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\n *\n * If the set of allowed query characters is not acceptable for a particular backend,\n * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\n *\n * ```\n * import {URLSearchParams, QueryEncoder} from '\\@angular/http';\n * class MyQueryEncoder extends QueryEncoder {\n *   encodeKey(k: string): string {\n *     return myEncodingFunction(k);\n *   }\n *\n *   encodeValue(v: string): string {\n *     return myEncodingFunction(v);\n *   }\n * }\n *\n * let params = new URLSearchParams('', new MyQueryEncoder());\n * ```\n * \\@experimental\n */\nclass URLSearchParams {\n  /**\n   * @param {?=} rawParams\n   * @param {?=} queryEncoder\n   */\n  constructor(rawParams = '', queryEncoder = new QueryEncoder()) {\n    this.rawParams = rawParams;\n    this.queryEncoder = queryEncoder;\n    this.paramsMap = paramParser(rawParams);\n  }\n  /**\n   * @return {?}\n   */\n  clone() {\n    const /** @type {?} */clone = new URLSearchParams('', this.queryEncoder);\n    clone.appendAll(this);\n    return clone;\n  }\n  /**\n   * @param {?} param\n   * @return {?}\n   */\n  has(param) {\n    return this.paramsMap.has(param);\n  }\n  /**\n   * @param {?} param\n   * @return {?}\n   */\n  get(param) {\n    const /** @type {?} */storedParam = this.paramsMap.get(param);\n    return Array.isArray(storedParam) ? storedParam[0] : null;\n  }\n  /**\n   * @param {?} param\n   * @return {?}\n   */\n  getAll(param) {\n    return this.paramsMap.get(param) || [];\n  }\n  /**\n   * @param {?} param\n   * @param {?} val\n   * @return {?}\n   */\n  set(param, val) {\n    if (val === void 0 || val === null) {\n      this.delete(param);\n      return;\n    }\n    const /** @type {?} */list = this.paramsMap.get(param) || [];\n    list.length = 0;\n    list.push(val);\n    this.paramsMap.set(param, list);\n  }\n  /**\n   * @param {?} searchParams\n   * @return {?}\n   */\n  setAll(searchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const /** @type {?} */list = this.paramsMap.get(param) || [];\n      list.length = 0;\n      list.push(value[0]);\n      this.paramsMap.set(param, list);\n    });\n  }\n  /**\n   * @param {?} param\n   * @param {?} val\n   * @return {?}\n   */\n  append(param, val) {\n    if (val === void 0 || val === null) return;\n    const /** @type {?} */list = this.paramsMap.get(param) || [];\n    list.push(val);\n    this.paramsMap.set(param, list);\n  }\n  /**\n   * @param {?} searchParams\n   * @return {?}\n   */\n  appendAll(searchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const /** @type {?} */list = this.paramsMap.get(param) || [];\n      for (let /** @type {?} */i = 0; i < value.length; ++i) {\n        list.push(value[i]);\n      }\n      this.paramsMap.set(param, list);\n    });\n  }\n  /**\n   * @param {?} searchParams\n   * @return {?}\n   */\n  replaceAll(searchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const /** @type {?} */list = this.paramsMap.get(param) || [];\n      list.length = 0;\n      for (let /** @type {?} */i = 0; i < value.length; ++i) {\n        list.push(value[i]);\n      }\n      this.paramsMap.set(param, list);\n    });\n  }\n  /**\n   * @return {?}\n   */\n  toString() {\n    const /** @type {?} */paramsList = [];\n    this.paramsMap.forEach((values, k) => {\n      values.forEach(v => paramsList.push(this.queryEncoder.encodeKey(k) + '=' + this.queryEncoder.encodeValue(v)));\n    });\n    return paramsList.join('&');\n  }\n  /**\n   * @param {?} param\n   * @return {?}\n   */\n  delete(param) {\n    this.paramsMap.delete(param);\n  }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * HTTP request body used by both {\\@link Request} and {\\@link Response}\n * https://fetch.spec.whatwg.org/#body\n * @abstract\n */\nclass Body {\n  /**\n   * Attempts to return body as parsed `JSON` object, or raises an exception.\n   * @return {?}\n   */\n  json() {\n    if (typeof this._body === 'string') {\n      return JSON.parse( /** @type {?} */this._body);\n    }\n    if (this._body instanceof ArrayBuffer) {\n      return JSON.parse(this.text());\n    }\n    return this._body;\n  }\n  /**\n   * Returns the body as a string, presuming `toString()` can be called on the response body.\n   *\n   * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n   * bytes in the buffer will be interpreted. Valid values are:\n   *\n   * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n   *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n   *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n   *   into consideration. This is the default behavior to avoid breaking apps, but should be\n   *   considered deprecated.\n   *\n   * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n   * @param {?=} encodingHint\n   * @return {?}\n   */\n  text(encodingHint = 'legacy') {\n    if (this._body instanceof URLSearchParams) {\n      return this._body.toString();\n    }\n    if (this._body instanceof ArrayBuffer) {\n      switch (encodingHint) {\n        case 'legacy':\n          return String.fromCharCode.apply(null, new Uint16Array( /** @type {?} */this._body));\n        case 'iso-8859':\n          return String.fromCharCode.apply(null, new Uint8Array( /** @type {?} */this._body));\n        default:\n          throw new Error(`Invalid value for encodingHint: ${encodingHint}`);\n      }\n    }\n    if (this._body == null) {\n      return '';\n    }\n    if (typeof this._body === 'object') {\n      return JSON.stringify(this._body, null, 2);\n    }\n    return this._body.toString();\n  }\n  /**\n   * Return the body as an ArrayBuffer\n   * @return {?}\n   */\n  arrayBuffer() {\n    if (this._body instanceof ArrayBuffer) {\n      return this._body;\n    }\n    return stringToArrayBuffer(this.text());\n  }\n  /**\n   * Returns the request's body as a Blob, assuming that body exists.\n   * @return {?}\n   */\n  blob() {\n    if (this._body instanceof Blob) {\n      return this._body;\n    }\n    if (this._body instanceof ArrayBuffer) {\n      return new Blob([this._body]);\n    }\n    throw new Error('The request body isn\\'t either a blob or an array buffer');\n  }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates `Response` instances from provided values.\n *\n * Though this object isn't\n * usually instantiated by end-users, it is the primary object interacted with when it comes time to\n * add data to a view.\n *\n * ### Example\n *\n * ```\n * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\n * ```\n *\n * The Response's interface is inspired by the Response constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\n * can be accessed many times. There are other differences in the implementation, but this is the\n * most significant.\n *\n * \\@experimental\n */\nclass Response extends Body {\n  /**\n   * @param {?} responseOptions\n   */\n  constructor(responseOptions) {\n    super();\n    this._body = responseOptions.body;\n    this.status = responseOptions.status;\n    this.ok = this.status >= 200 && this.status <= 299;\n    this.statusText = responseOptions.statusText;\n    this.headers = responseOptions.headers;\n    this.type = responseOptions.type;\n    this.url = responseOptions.url;\n  }\n  /**\n   * @return {?}\n   */\n  toString() {\n    return `Response with status: ${this.status} ${this.statusText} for URL: ${this.url}`;\n  }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet _nextRequestId = 0;\nconst JSONP_HOME = '__ng_jsonp__';\nlet _jsonpConnections = null;\n/**\n * @return {?}\n */\nfunction _getJsonpConnections() {\n  const /** @type {?} */w = typeof window == 'object' ? window : {};\n  if (_jsonpConnections === null) {\n    _jsonpConnections = w[JSONP_HOME] = {};\n  }\n  return _jsonpConnections;\n}\nclass BrowserJsonp {\n  /**\n   * @param {?} url\n   * @return {?}\n   */\n  build(url) {\n    const /** @type {?} */node = document.createElement('script');\n    node.src = url;\n    return node;\n  }\n  /**\n   * @return {?}\n   */\n  nextRequestID() {\n    return `__req${_nextRequestId++}`;\n  }\n  /**\n   * @param {?} id\n   * @return {?}\n   */\n  requestCallback(id) {\n    return `${JSONP_HOME}.${id}.finished`;\n  }\n  /**\n   * @param {?} id\n   * @param {?} connection\n   * @return {?}\n   */\n  exposeConnection(id, connection) {\n    const /** @type {?} */connections = _getJsonpConnections();\n    connections[id] = connection;\n  }\n  /**\n   * @param {?} id\n   * @return {?}\n   */\n  removeConnection(id) {\n    const /** @type {?} */connections = _getJsonpConnections();\n    connections[id] = null;\n  }\n  /**\n   * @param {?} node\n   * @return {?}\n   */\n  send(node) {\n    document.body.appendChild( /** @type {?} */node);\n  }\n  /**\n   * @param {?} node\n   * @return {?}\n   */\n  cleanup(node) {\n    if (node.parentNode) {\n      node.parentNode.removeChild( /** @type {?} */node);\n    }\n  }\n}\nBrowserJsonp.decorators = [{\n  type: Injectable\n}];\n/**\n * @nocollapse\n */\nBrowserJsonp.ctorParameters = () => [];\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\n/**\n * Abstract base class for an in-flight JSONP request.\n *\n * \\@experimental\n * @abstract\n */\nclass JSONPConnection {\n  /**\n   * Callback called when the JSONP request completes, to notify the application\n   * of the new data.\n   * @abstract\n   * @param {?=} data\n   * @return {?}\n   */\n  finished(data) {}\n}\nclass JSONPConnection_ extends JSONPConnection {\n  /**\n   * @param {?} req\n   * @param {?} _dom\n   * @param {?=} baseResponseOptions\n   */\n  constructor(req, _dom, baseResponseOptions) {\n    super();\n    this._dom = _dom;\n    this.baseResponseOptions = baseResponseOptions;\n    this._finished = false;\n    if (req.method !== RequestMethod.Get) {\n      throw new TypeError(JSONP_ERR_WRONG_METHOD);\n    }\n    this.request = req;\n    this.response = new Observable(responseObserver => {\n      this.readyState = ReadyState.Loading;\n      const id = this._id = _dom.nextRequestID();\n      _dom.exposeConnection(id, this);\n      // Workaround Dart\n      // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);\n      const callback = _dom.requestCallback(this._id);\n      let url = req.url;\n      if (url.indexOf('=JSONP_CALLBACK&') > -1) {\n        url = url.replace('=JSONP_CALLBACK&', `=${callback}&`);\n      } else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {\n        url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + `=${callback}`;\n      }\n      const script = this._script = _dom.build(url);\n      const onLoad = event => {\n        if (this.readyState === ReadyState.Cancelled) return;\n        this.readyState = ReadyState.Done;\n        _dom.cleanup(script);\n        if (!this._finished) {\n          let responseOptions = new ResponseOptions({\n            body: JSONP_ERR_NO_CALLBACK,\n            type: ResponseType.Error,\n            url\n          });\n          if (baseResponseOptions) {\n            responseOptions = baseResponseOptions.merge(responseOptions);\n          }\n          responseObserver.error(new Response(responseOptions));\n          return;\n        }\n        let responseOptions = new ResponseOptions({\n          body: this._responseData,\n          url\n        });\n        if (this.baseResponseOptions) {\n          responseOptions = this.baseResponseOptions.merge(responseOptions);\n        }\n        responseObserver.next(new Response(responseOptions));\n        responseObserver.complete();\n      };\n      const onError = error => {\n        if (this.readyState === ReadyState.Cancelled) return;\n        this.readyState = ReadyState.Done;\n        _dom.cleanup(script);\n        let responseOptions = new ResponseOptions({\n          body: error.message,\n          type: ResponseType.Error\n        });\n        if (baseResponseOptions) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        responseObserver.error(new Response(responseOptions));\n      };\n      script.addEventListener('load', onLoad);\n      script.addEventListener('error', onError);\n      _dom.send(script);\n      return () => {\n        this.readyState = ReadyState.Cancelled;\n        script.removeEventListener('load', onLoad);\n        script.removeEventListener('error', onError);\n        this._dom.cleanup(script);\n      };\n    });\n  }\n  /**\n   * @param {?=} data\n   * @return {?}\n   */\n  finished(data) {\n    // Don't leak connections\n    this._finished = true;\n    this._dom.removeConnection(this._id);\n    if (this.readyState === ReadyState.Cancelled) return;\n    this._responseData = data;\n  }\n}\n/**\n * A {\\@link ConnectionBackend} that uses the JSONP strategy of making requests.\n *\n * \\@experimental\n * @abstract\n */\nclass JSONPBackend extends ConnectionBackend {}\nclass JSONPBackend_ extends JSONPBackend {\n  /**\n   * @param {?} _browserJSONP\n   * @param {?} _baseResponseOptions\n   */\n  constructor(_browserJSONP, _baseResponseOptions) {\n    super();\n    this._browserJSONP = _browserJSONP;\n    this._baseResponseOptions = _baseResponseOptions;\n  }\n  /**\n   * @param {?} request\n   * @return {?}\n   */\n  createConnection(request) {\n    return new JSONPConnection_(request, this._browserJSONP, this._baseResponseOptions);\n  }\n}\nJSONPBackend_.decorators = [{\n  type: Injectable\n}];\n/**\n * @nocollapse\n */\nJSONPBackend_.ctorParameters = () => [{\n  type: BrowserJsonp\n}, {\n  type: ResponseOptions\n}];\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n * request.\n *\n * This class would typically not be created or interacted with directly inside applications, though\n * the {\\@link MockConnection} may be interacted with in tests.\n *\n * \\@experimental\n */\nclass XHRConnection {\n  /**\n   * @param {?} req\n   * @param {?} browserXHR\n   * @param {?=} baseResponseOptions\n   */\n  constructor(req, browserXHR, baseResponseOptions) {\n    this.request = req;\n    this.response = new Observable(responseObserver => {\n      const _xhr = browserXHR.build();\n      _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);\n      if (req.withCredentials != null) {\n        _xhr.withCredentials = req.withCredentials;\n      }\n      // load event handler\n      const onLoad = () => {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        let status = _xhr.status === 1223 ? 204 : _xhr.status;\n        let body = null;\n        // HTTP 204 means no content\n        if (status !== 204) {\n          // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n          // response/responseType properties were introduced in ResourceLoader Level2 spec\n          // (supported by IE10)\n          body = typeof _xhr.response === 'undefined' ? _xhr.responseText : _xhr.response;\n          // Implicitly strip a potential XSSI prefix.\n          if (typeof body === 'string') {\n            body = body.replace(XSSI_PREFIX, '');\n          }\n        }\n        // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n        if (status === 0) {\n          status = body ? 200 : 0;\n        }\n        const headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\n        // IE 9 does not provide the way to get URL of response\n        const url = getResponseURL(_xhr) || req.url;\n        const statusText = _xhr.statusText || 'OK';\n        let responseOptions = new ResponseOptions({\n          body,\n          status,\n          headers,\n          statusText,\n          url\n        });\n        if (baseResponseOptions != null) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        const response = new Response(responseOptions);\n        response.ok = isSuccess(status);\n        if (response.ok) {\n          responseObserver.next(response);\n          // TODO(gdi2290): defer complete if array buffer until done\n          responseObserver.complete();\n          return;\n        }\n        responseObserver.error(response);\n      };\n      // error event handler\n      const onError = err => {\n        let responseOptions = new ResponseOptions({\n          body: err,\n          type: ResponseType.Error,\n          status: _xhr.status,\n          statusText: _xhr.statusText\n        });\n        if (baseResponseOptions != null) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        responseObserver.error(new Response(responseOptions));\n      };\n      this.setDetectedContentType(req, _xhr);\n      if (req.headers == null) {\n        req.headers = new Headers();\n      }\n      if (!req.headers.has('Accept')) {\n        req.headers.append('Accept', 'application/json, text/plain, */*');\n      }\n      req.headers.forEach((values, name) => _xhr.setRequestHeader(name, values.join(',')));\n      // Select the correct buffer type to store the response\n      if (req.responseType != null && _xhr.responseType != null) {\n        switch (req.responseType) {\n          case ResponseContentType.ArrayBuffer:\n            _xhr.responseType = 'arraybuffer';\n            break;\n          case ResponseContentType.Json:\n            _xhr.responseType = 'json';\n            break;\n          case ResponseContentType.Text:\n            _xhr.responseType = 'text';\n            break;\n          case ResponseContentType.Blob:\n            _xhr.responseType = 'blob';\n            break;\n          default:\n            throw new Error('The selected responseType is not supported');\n        }\n      }\n      _xhr.addEventListener('load', onLoad);\n      _xhr.addEventListener('error', onError);\n      _xhr.send(this.request.getBody());\n      return () => {\n        _xhr.removeEventListener('load', onLoad);\n        _xhr.removeEventListener('error', onError);\n        _xhr.abort();\n      };\n    });\n  }\n  /**\n   * @param {?} req\n   * @param {?} _xhr\n   * @return {?}\n   */\n  setDetectedContentType(req /** TODO Request */, _xhr /** XMLHttpRequest */) {\n    // Skip if a custom Content-Type header is provided\n    if (req.headers != null && req.headers.get('Content-Type') != null) {\n      return;\n    }\n    // Set the detected content type\n    switch (req.contentType) {\n      case ContentType.NONE:\n        break;\n      case ContentType.JSON:\n        _xhr.setRequestHeader('content-type', 'application/json');\n        break;\n      case ContentType.FORM:\n        _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        break;\n      case ContentType.TEXT:\n        _xhr.setRequestHeader('content-type', 'text/plain');\n        break;\n      case ContentType.BLOB:\n        const /** @type {?} */blob = req.blob();\n        if (blob.type) {\n          _xhr.setRequestHeader('content-type', blob.type);\n        }\n        break;\n    }\n  }\n}\n/**\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n * for more information on XSRF.\n *\n * Applications can configure custom cookie and header names by binding an instance of this class\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n * details.\n *\n * \\@experimental\n */\nclass CookieXSRFStrategy {\n  /**\n   * @param {?=} _cookieName\n   * @param {?=} _headerName\n   */\n  constructor(_cookieName = 'XSRF-TOKEN', _headerName = 'X-XSRF-TOKEN') {\n    this._cookieName = _cookieName;\n    this._headerName = _headerName;\n  }\n  /**\n   * @param {?} req\n   * @return {?}\n   */\n  configureRequest(req) {\n    const /** @type {?} */xsrfToken = ÉµgetDOM().getCookie(this._cookieName);\n    if (xsrfToken) {\n      req.headers.set(this._headerName, xsrfToken);\n    }\n  }\n}\n/**\n * Creates {\\@link XHRConnection} instances.\n *\n * This class would typically not be used by end users, but could be\n * overridden if a different backend implementation should be used,\n * such as in a node backend.\n *\n * ### Example\n *\n * ```\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '\\@angular/http';\n * \\@Component({\n *   viewProviders: [\n *     HTTP_PROVIDERS,\n *     {provide: Http, useFactory: (backend, options) => {\n *       return new Http(backend, options);\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n * })\n * class MyComponent {\n *   constructor(http:Http) {\n *     http.request('people.json').subscribe(res => this.people = res.json());\n *   }\n * }\n * ```\n * \\@experimental\n */\nclass XHRBackend {\n  /**\n   * @param {?} _browserXHR\n   * @param {?} _baseResponseOptions\n   * @param {?} _xsrfStrategy\n   */\n  constructor(_browserXHR, _baseResponseOptions, _xsrfStrategy) {\n    this._browserXHR = _browserXHR;\n    this._baseResponseOptions = _baseResponseOptions;\n    this._xsrfStrategy = _xsrfStrategy;\n  }\n  /**\n   * @param {?} request\n   * @return {?}\n   */\n  createConnection(request) {\n    this._xsrfStrategy.configureRequest(request);\n    return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n  }\n}\nXHRBackend.decorators = [{\n  type: Injectable\n}];\n/**\n * @nocollapse\n */\nXHRBackend.ctorParameters = () => [{\n  type: BrowserXhr\n}, {\n  type: ResponseOptions\n}, {\n  type: XSRFStrategy\n}];\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates a request options object to be optionally provided when instantiating a\n * {\\@link Request}.\n *\n * This class is based on the `RequestInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\n *\n * All values are null by default. Typical defaults can be found in the {\\@link BaseRequestOptions}\n * class, which sub-classes `RequestOptions`.\n *\n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n *\n * const options = new RequestOptions({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * });\n * const req = new Request(options);\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // https://google.com\n * ```\n *\n * \\@experimental\n */\nclass RequestOptions {\n  /**\n   * @deprecated from 4.0.0. Use params instead.\n   * @return {?}\n   */\n  get search() {\n    return this.params;\n  }\n  /**\n   * @deprecated from 4.0.0. Use params instead.\n   * @param {?} params\n   * @return {?}\n   */\n  set search(params) {\n    this.params = params;\n  }\n  /**\n   * @param {?=} opts\n   */\n  constructor(opts = {}) {\n    const {\n      method,\n      headers,\n      body,\n      url,\n      search,\n      params,\n      withCredentials,\n      responseType\n    } = opts;\n    this.method = method != null ? normalizeMethodName(method) : null;\n    this.headers = headers != null ? headers : null;\n    this.body = body != null ? body : null;\n    this.url = url != null ? url : null;\n    this.params = this._mergeSearchParams(params || search);\n    this.withCredentials = withCredentials != null ? withCredentials : null;\n    this.responseType = responseType != null ? responseType : null;\n  }\n  /**\n   * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n   * existing values. This method will not change the values of the instance on which it is being\n   * called.\n   *\n   * Note that `headers` and `search` will override existing values completely if present in\n   * the `options` object. If these values should be merged, it should be done prior to calling\n   * `merge` on the `RequestOptions` instance.\n   *\n   * ```typescript\n   * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n   *\n   * const options = new RequestOptions({\n   *   method: RequestMethod.Post\n   * });\n   * const req = new Request(options.merge({\n   *   url: 'https://google.com'\n   * }));\n   * console.log('req.method:', RequestMethod[req.method]); // Post\n   * console.log('options.url:', options.url); // null\n   * console.log('req.url:', req.url); // https://google.com\n   * ```\n   * @param {?=} options\n   * @return {?}\n   */\n  merge(options) {\n    return new RequestOptions({\n      method: options && options.method != null ? options.method : this.method,\n      headers: options && options.headers != null ? options.headers : new Headers(this.headers),\n      body: options && options.body != null ? options.body : this.body,\n      url: options && options.url != null ? options.url : this.url,\n      params: options && this._mergeSearchParams(options.params || options.search),\n      withCredentials: options && options.withCredentials != null ? options.withCredentials : this.withCredentials,\n      responseType: options && options.responseType != null ? options.responseType : this.responseType\n    });\n  }\n  /**\n   * @param {?=} params\n   * @return {?}\n   */\n  _mergeSearchParams(params) {\n    if (!params) return this.params;\n    if (params instanceof URLSearchParams) {\n      return params.clone();\n    }\n    if (typeof params === 'string') {\n      return new URLSearchParams(params);\n    }\n    return this._parseParams(params);\n  }\n  /**\n   * @param {?=} objParams\n   * @return {?}\n   */\n  _parseParams(objParams = {}) {\n    const /** @type {?} */params = new URLSearchParams();\n    Object.keys(objParams).forEach(key => {\n      const /** @type {?} */value = objParams[key];\n      if (Array.isArray(value)) {\n        value.forEach(item => this._appendParam(key, item, params));\n      } else {\n        this._appendParam(key, value, params);\n      }\n    });\n    return params;\n  }\n  /**\n   * @param {?} key\n   * @param {?} value\n   * @param {?} params\n   * @return {?}\n   */\n  _appendParam(key, value, params) {\n    if (typeof value !== 'string') {\n      value = JSON.stringify(value);\n    }\n    params.append(key, value);\n  }\n}\n/**\n * Subclass of {\\@link RequestOptions}, with default values.\n *\n * Default values:\n *  * method: {\\@link RequestMethod RequestMethod.Get}\n *  * headers: empty {\\@link Headers} object\n *\n * This class could be extended and bound to the {\\@link RequestOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create and send {\\@link Request Requests}.\n *\n * ```typescript\n * import {BaseRequestOptions, RequestOptions} from '\\@angular/http';\n *\n * class MyOptions extends BaseRequestOptions {\n *   search: string = 'coreTeam=true';\n * }\n *\n * {provide: RequestOptions, useClass: MyOptions};\n * ```\n *\n * The options could also be extended when manually creating a {\\@link Request}\n * object.\n *\n * ```\n * import {BaseRequestOptions, Request, RequestMethod} from '\\@angular/http';\n *\n * const options = new BaseRequestOptions();\n * const req = new Request(options.merge({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n *\n * \\@experimental\n */\nclass BaseRequestOptions extends RequestOptions {\n  constructor() {\n    super({\n      method: RequestMethod.Get,\n      headers: new Headers()\n    });\n  }\n}\nBaseRequestOptions.decorators = [{\n  type: Injectable\n}];\n/**\n * @nocollapse\n */\nBaseRequestOptions.ctorParameters = () => [];\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates `Request` instances from provided values.\n *\n * The Request's interface is inspired by the Request constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#request-class),\n * but is considered a static value whose body can be accessed many times. There are other\n * differences in the implementation, but this is the most significant.\n *\n * `Request` instances are typically created by higher-level classes, like {\\@link Http} and\n * {\\@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n * One such example is when creating services that wrap higher-level services, like {\\@link Http},\n * where it may be useful to generate a `Request` with arbitrary headers and search params.\n *\n * ```typescript\n * import {Injectable, Injector} from '\\@angular/core';\n * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '\\@angular/http';\n *\n * \\@Injectable()\n * class AutoAuthenticator {\n *   constructor(public http:Http) {}\n *   request(url:string) {\n *     return this.http.request(new Request({\n *       method: RequestMethod.Get,\n *       url: url,\n *       search: 'password=123'\n *     }));\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n * var authenticator = injector.get(AutoAuthenticator);\n * authenticator.request('people.json').subscribe(res => {\n *   //URL should have included '?password=123'\n *   console.log('people', res.json());\n * });\n * ```\n *\n * \\@experimental\n */\nclass Request extends Body {\n  /**\n   * @param {?} requestOptions\n   */\n  constructor(requestOptions) {\n    super();\n    // TODO: assert that url is present\n    const url = requestOptions.url;\n    this.url = requestOptions.url;\n    const paramsArg = requestOptions.params || requestOptions.search;\n    if (paramsArg) {\n      let params;\n      if (typeof paramsArg === 'object' && !(paramsArg instanceof URLSearchParams)) {\n        params = urlEncodeParams(paramsArg).toString();\n      } else {\n        params = paramsArg.toString();\n      }\n      if (params.length > 0) {\n        let prefix = '?';\n        if (this.url.indexOf('?') != -1) {\n          prefix = this.url[this.url.length - 1] == '&' ? '' : '&';\n        }\n        // TODO: just delete search-query-looking string in url?\n        this.url = url + prefix + params;\n      }\n    }\n    this._body = requestOptions.body;\n    this.method = normalizeMethodName(requestOptions.method);\n    // TODO(jeffbcross): implement behavior\n    // Defaults to 'omit', consistent with browser\n    this.headers = new Headers(requestOptions.headers);\n    this.contentType = this.detectContentType();\n    this.withCredentials = requestOptions.withCredentials;\n    this.responseType = requestOptions.responseType;\n  }\n  /**\n   * Returns the content type enum based on header options.\n   * @return {?}\n   */\n  detectContentType() {\n    switch (this.headers.get('content-type')) {\n      case 'application/json':\n        return ContentType.JSON;\n      case 'application/x-www-form-urlencoded':\n        return ContentType.FORM;\n      case 'multipart/form-data':\n        return ContentType.FORM_DATA;\n      case 'text/plain':\n      case 'text/html':\n        return ContentType.TEXT;\n      case 'application/octet-stream':\n        return this._body instanceof ArrayBuffer$1 ? ContentType.ARRAY_BUFFER : ContentType.BLOB;\n      default:\n        return this.detectContentTypeFromBody();\n    }\n  }\n  /**\n   * Returns the content type of request's body based on its type.\n   * @return {?}\n   */\n  detectContentTypeFromBody() {\n    if (this._body == null) {\n      return ContentType.NONE;\n    } else if (this._body instanceof URLSearchParams) {\n      return ContentType.FORM;\n    } else if (this._body instanceof FormData) {\n      return ContentType.FORM_DATA;\n    } else if (this._body instanceof Blob$1) {\n      return ContentType.BLOB;\n    } else if (this._body instanceof ArrayBuffer$1) {\n      return ContentType.ARRAY_BUFFER;\n    } else if (this._body && typeof this._body === 'object') {\n      return ContentType.JSON;\n    } else {\n      return ContentType.TEXT;\n    }\n  }\n  /**\n   * Returns the request's body according to its type. If body is undefined, return\n   * null.\n   * @return {?}\n   */\n  getBody() {\n    switch (this.contentType) {\n      case ContentType.JSON:\n        return this.text();\n      case ContentType.FORM:\n        return this.text();\n      case ContentType.FORM_DATA:\n        return this._body;\n      case ContentType.TEXT:\n        return this.text();\n      case ContentType.BLOB:\n        return this.blob();\n      case ContentType.ARRAY_BUFFER:\n        return this.arrayBuffer();\n      default:\n        return null;\n    }\n  }\n}\n/**\n * @param {?} params\n * @return {?}\n */\nfunction urlEncodeParams(params) {\n  const /** @type {?} */searchParams = new URLSearchParams();\n  Object.keys(params).forEach(key => {\n    const /** @type {?} */value = params[key];\n    if (value && Array.isArray(value)) {\n      value.forEach(element => searchParams.append(key, element.toString()));\n    } else {\n      searchParams.append(key, value.toString());\n    }\n  });\n  return searchParams;\n}\nconst noop = function () {};\nconst w = typeof window == 'object' ? window : noop;\nconst FormData = w /** TODO #9100 */['FormData'] || noop;\nconst Blob$1 = w /** TODO #9100 */['Blob'] || noop;\nconst ArrayBuffer$1 = w /** TODO #9100 */['ArrayBuffer'] || noop;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} backend\n * @param {?} request\n * @return {?}\n */\nfunction httpRequest(backend, request) {\n  return backend.createConnection(request).response;\n}\n/**\n * @param {?} defaultOpts\n * @param {?} providedOpts\n * @param {?} method\n * @param {?} url\n * @return {?}\n */\nfunction mergeOptions(defaultOpts, providedOpts, method, url) {\n  const /** @type {?} */newOptions = defaultOpts;\n  if (providedOpts) {\n    // Hack so Dart can used named parameters\n    return newOptions.merge(new RequestOptions({\n      method: providedOpts.method || method,\n      url: providedOpts.url || url,\n      search: providedOpts.search,\n      params: providedOpts.params,\n      headers: providedOpts.headers,\n      body: providedOpts.body,\n      withCredentials: providedOpts.withCredentials,\n      responseType: providedOpts.responseType\n    }));\n  }\n  return newOptions.merge(new RequestOptions({\n    method,\n    url\n  }));\n}\n/**\n * Performs http requests using `XMLHttpRequest` as the default backend.\n *\n * `Http` is available as an injectable class, with methods to perform http requests. Calling\n * `request` returns an `Observable` which will emit a single {\\@link Response} when a\n * response is received.\n *\n * ### Example\n *\n * ```typescript\n * import {Http, HTTP_PROVIDERS} from '\\@angular/http';\n * import 'rxjs/add/operator/map'\n * \\@Component({\n *   selector: 'http-app',\n *   viewProviders: [HTTP_PROVIDERS],\n *   templateUrl: 'people.html'\n * })\n * class PeopleComponent {\n *   constructor(http: Http) {\n *     http.get('people.json')\n *       // Call map on the response observable to get the parsed people object\n *       .map(res => res.json())\n *       // Subscribe to the observable to get the parsed people object and attach it to the\n *       // component\n *       .subscribe(people => this.people = people);\n *   }\n * }\n * ```\n *\n *\n * ### Example\n *\n * ```\n * http.get('people.json').subscribe((res:Response) => this.people = res.json());\n * ```\n *\n * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\n * {\\@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\n * the {\\@link XHRBackend} provider, as in the following example:\n *\n * ### Example\n *\n * ```typescript\n * import {BaseRequestOptions, Http} from '\\@angular/http';\n * import {MockBackend} from '\\@angular/http/testing';\n * var injector = Injector.resolveAndCreate([\n *   BaseRequestOptions,\n *   MockBackend,\n *   {provide: Http, useFactory:\n *       function(backend, defaultOptions) {\n *         return new Http(backend, defaultOptions);\n *       },\n *       deps: [MockBackend, BaseRequestOptions]}\n * ]);\n * var http = injector.get(Http);\n * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\n * ```\n *\n * \\@experimental\n */\nclass Http {\n  /**\n   * @param {?} _backend\n   * @param {?} _defaultOptions\n   */\n  constructor(_backend, _defaultOptions) {\n    this._backend = _backend;\n    this._defaultOptions = _defaultOptions;\n  }\n  /**\n   * Performs any type of http request. First argument is required, and can either be a url or\n   * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n   * object can be provided as the 2nd argument. The options object will be merged with the values\n   * of {\\@link BaseRequestOptions} before performing the request.\n   * @param {?} url\n   * @param {?=} options\n   * @return {?}\n   */\n  request(url, options) {\n    let /** @type {?} */responseObservable;\n    if (typeof url === 'string') {\n      responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */url)));\n    } else if (url instanceof Request) {\n      responseObservable = httpRequest(this._backend, url);\n    } else {\n      throw new Error('First argument must be a url string or Request instance.');\n    }\n    return responseObservable;\n  }\n  /**\n   * Performs a request with `get` http method.\n   * @param {?} url\n   * @param {?=} options\n   * @return {?}\n   */\n  get(url, options) {\n    return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));\n  }\n  /**\n   * Performs a request with `post` http method.\n   * @param {?} url\n   * @param {?} body\n   * @param {?=} options\n   * @return {?}\n   */\n  post(url, body, options) {\n    return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({\n      body: body\n    })), options, RequestMethod.Post, url)));\n  }\n  /**\n   * Performs a request with `put` http method.\n   * @param {?} url\n   * @param {?} body\n   * @param {?=} options\n   * @return {?}\n   */\n  put(url, body, options) {\n    return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({\n      body: body\n    })), options, RequestMethod.Put, url)));\n  }\n  /**\n   * Performs a request with `delete` http method.\n   * @param {?} url\n   * @param {?=} options\n   * @return {?}\n   */\n  delete(url, options) {\n    return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));\n  }\n  /**\n   * Performs a request with `patch` http method.\n   * @param {?} url\n   * @param {?} body\n   * @param {?=} options\n   * @return {?}\n   */\n  patch(url, body, options) {\n    return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({\n      body: body\n    })), options, RequestMethod.Patch, url)));\n  }\n  /**\n   * Performs a request with `head` http method.\n   * @param {?} url\n   * @param {?=} options\n   * @return {?}\n   */\n  head(url, options) {\n    return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));\n  }\n  /**\n   * Performs a request with `options` http method.\n   * @param {?} url\n   * @param {?=} options\n   * @return {?}\n   */\n  options(url, options) {\n    return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));\n  }\n}\nHttp.decorators = [{\n  type: Injectable\n}];\n/**\n * @nocollapse\n */\nHttp.ctorParameters = () => [{\n  type: ConnectionBackend\n}, {\n  type: RequestOptions\n}];\n/**\n * \\@experimental\n */\nclass Jsonp extends Http {\n  /**\n   * @param {?} backend\n   * @param {?} defaultOptions\n   */\n  constructor(backend, defaultOptions) {\n    super(backend, defaultOptions);\n  }\n  /**\n   * Performs any type of http request. First argument is required, and can either be a url or\n   * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n   * object can be provided as the 2nd argument. The options object will be merged with the values\n   * of {\\@link BaseRequestOptions} before performing the request.\n   *\n   * \\@security Regular XHR is the safest alternative to JSONP for most applications, and is\n   * supported by all current browsers. Because JSONP creates a `<script>` element with\n   * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n   * source could expose your application to XSS risks. Data exposed by JSONP may also be\n   * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n   * future security issues (e.g. content sniffing).  For more detail, see the\n   * [Security Guide](http://g.co/ng/security).\n   * @param {?} url\n   * @param {?=} options\n   * @return {?}\n   */\n  request(url, options) {\n    let /** @type {?} */responseObservable;\n    if (typeof url === 'string') {\n      url = new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */url));\n    }\n    if (url instanceof Request) {\n      if (url.method !== RequestMethod.Get) {\n        throw new Error('JSONP requests must use GET request method.');\n      }\n      responseObservable = httpRequest(this._backend, url);\n    } else {\n      throw new Error('First argument must be a url string or Request instance.');\n    }\n    return responseObservable;\n  }\n}\nJsonp.decorators = [{\n  type: Injectable\n}];\n/**\n * @nocollapse\n */\nJsonp.ctorParameters = () => [{\n  type: ConnectionBackend\n}, {\n  type: RequestOptions\n}];\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * The http module provides services to perform http requests. To get started, see the {@link Http}\n * class.\n */\n/**\n * @return {?}\n */\nfunction _createDefaultCookieXSRFStrategy() {\n  return new CookieXSRFStrategy();\n}\n/**\n * @param {?} xhrBackend\n * @param {?} requestOptions\n * @return {?}\n */\nfunction httpFactory(xhrBackend, requestOptions) {\n  return new Http(xhrBackend, requestOptions);\n}\n/**\n * @param {?} jsonpBackend\n * @param {?} requestOptions\n * @return {?}\n */\nfunction jsonpFactory(jsonpBackend, requestOptions) {\n  return new Jsonp(jsonpBackend, requestOptions);\n}\n/**\n * The module that includes http's providers\n *\n * \\@experimental\n */\nclass HttpModule {}\nHttpModule.decorators = [{\n  type: NgModule,\n  args: [{\n    providers: [\n    // TODO(pascal): use factory type annotations once supported in DI\n    // issue: https://github.com/angular/angular/issues/3183\n    {\n      provide: Http,\n      useFactory: httpFactory,\n      deps: [XHRBackend, RequestOptions]\n    }, BrowserXhr, {\n      provide: RequestOptions,\n      useClass: BaseRequestOptions\n    }, {\n      provide: ResponseOptions,\n      useClass: BaseResponseOptions\n    }, XHRBackend, {\n      provide: XSRFStrategy,\n      useFactory: _createDefaultCookieXSRFStrategy\n    }]\n  }]\n}];\n/**\n * @nocollapse\n */\nHttpModule.ctorParameters = () => [];\n/**\n * The module that includes jsonp's providers\n *\n * \\@experimental\n */\nclass JsonpModule {}\nJsonpModule.decorators = [{\n  type: NgModule,\n  args: [{\n    providers: [\n    // TODO(pascal): use factory type annotations once supported in DI\n    // issue: https://github.com/angular/angular/issues/3183\n    {\n      provide: Jsonp,\n      useFactory: jsonpFactory,\n      deps: [JSONPBackend, RequestOptions]\n    }, BrowserJsonp, {\n      provide: RequestOptions,\n      useClass: BaseRequestOptions\n    }, {\n      provide: ResponseOptions,\n      useClass: BaseResponseOptions\n    }, {\n      provide: JSONPBackend,\n      useClass: JSONPBackend_\n    }]\n  }]\n}];\n/**\n * @nocollapse\n */\nJsonpModule.ctorParameters = () => [];\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\n/**\n * \\@stable\n */\nconst VERSION = new Version('4.4.7');\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the http package.\n */\n\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BrowserXhr, JSONPBackend, JSONPConnection, CookieXSRFStrategy, XHRBackend, XHRConnection, BaseRequestOptions, RequestOptions, BaseResponseOptions, ResponseOptions, ReadyState, RequestMethod, ResponseContentType, ResponseType, Headers, Http, Jsonp, HttpModule, JsonpModule, Connection, ConnectionBackend, XSRFStrategy, Request, Response, QueryEncoder, URLSearchParams, VERSION, BrowserJsonp as Éµg, JSONPBackend_ as Éµa, Body as Éµf, _createDefaultCookieXSRFStrategy as Éµb, httpFactory as Éµc, jsonpFactory as Éµd };","map":{"version":3,"names":["Injectable","NgModule","Version","Observable","ÉµgetDOM","BrowserXhr","constructor","build","XMLHttpRequest","decorators","type","ctorParameters","RequestMethod","Get","Post","Put","Delete","Options","Head","Patch","ReadyState","Unsent","Open","HeadersReceived","Loading","Done","Cancelled","ResponseType","Basic","Cors","Default","Error","Opaque","ContentType","NONE","JSON","FORM","FORM_DATA","TEXT","BLOB","ARRAY_BUFFER","ResponseContentType","Text","Json","ArrayBuffer","Blob","Headers","headers","_headers","Map","_normalizedNames","forEach","values","name","value","append","Object","keys","Array","isArray","delete","fromResponseHeaderString","headersString","split","line","index","indexOf","slice","trim","set","getAll","push","lcName","toLowerCase","fn","get","length","has","from","join","mayBeSetNormalizedName","toJSON","serialized","v","entries","ResponseOptions","opts","body","status","statusText","url","merge","options","BaseResponseOptions","ConnectionBackend","createConnection","request","Connection","XSRFStrategy","configureRequest","req","normalizeMethodName","method","toUpperCase","isSuccess","getResponseURL","xhr","responseURL","test","getAllResponseHeaders","getResponseHeader","stringToArrayBuffer","input","view","Uint16Array","i","strLen","charCodeAt","buffer","paramParser","rawParams","map","params","param","eqIdx","key","val","list","QueryEncoder","encodeKey","k","standardEncoding","encodeValue","encodeURIComponent","replace","URLSearchParams","queryEncoder","paramsMap","clone","appendAll","storedParam","setAll","searchParams","replaceAll","toString","paramsList","Body","json","_body","parse","text","encodingHint","String","fromCharCode","apply","Uint8Array","stringify","arrayBuffer","blob","Response","responseOptions","ok","_nextRequestId","JSONP_HOME","_jsonpConnections","_getJsonpConnections","w","window","BrowserJsonp","node","document","createElement","src","nextRequestID","requestCallback","id","exposeConnection","connection","connections","removeConnection","send","appendChild","cleanup","parentNode","removeChild","JSONP_ERR_NO_CALLBACK","JSONP_ERR_WRONG_METHOD","JSONPConnection","finished","data","JSONPConnection_","_dom","baseResponseOptions","_finished","TypeError","response","responseObserver","readyState","_id","callback","lastIndexOf","substring","script","_script","onLoad","event","error","_responseData","next","complete","onError","message","addEventListener","removeEventListener","JSONPBackend","JSONPBackend_","_browserJSONP","_baseResponseOptions","XSSI_PREFIX","XHRConnection","browserXHR","_xhr","open","withCredentials","responseText","err","setDetectedContentType","setRequestHeader","responseType","getBody","abort","contentType","CookieXSRFStrategy","_cookieName","_headerName","xsrfToken","getCookie","XHRBackend","_browserXHR","_xsrfStrategy","RequestOptions","search","_mergeSearchParams","_parseParams","objParams","item","_appendParam","BaseRequestOptions","Request","requestOptions","paramsArg","urlEncodeParams","prefix","detectContentType","ArrayBuffer$1","detectContentTypeFromBody","FormData","Blob$1","element","noop","httpRequest","backend","mergeOptions","defaultOpts","providedOpts","newOptions","Http","_backend","_defaultOptions","responseObservable","post","put","patch","head","Jsonp","defaultOptions","_createDefaultCookieXSRFStrategy","httpFactory","xhrBackend","jsonpFactory","jsonpBackend","HttpModule","args","providers","provide","useFactory","deps","useClass","JsonpModule","VERSION","Éµg","Éµa","Éµf","Éµb","Éµc","Éµd"],"sources":["C:/Users/Montg/Documents/Final Year/APDS/POE/POE/node_modules/@angular/http/@angular/http.js"],"sourcesContent":["/**\n * @license Angular v4.4.7\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\nimport { Injectable, NgModule, Version } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { ÉµgetDOM } from '@angular/platform-browser';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A backend for http that uses the `XMLHttpRequest` browser API.\n *\n * Take care not to evaluate this in non-browser contexts.\n *\n * \\@experimental\n */\nclass BrowserXhr {\n    constructor() { }\n    /**\n     * @return {?}\n     */\n    build() { return ((new XMLHttpRequest())); }\n}\nBrowserXhr.decorators = [\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nBrowserXhr.ctorParameters = () => [];\n\nlet RequestMethod = {};\nRequestMethod.Get = 0;\nRequestMethod.Post = 1;\nRequestMethod.Put = 2;\nRequestMethod.Delete = 3;\nRequestMethod.Options = 4;\nRequestMethod.Head = 5;\nRequestMethod.Patch = 6;\nRequestMethod[RequestMethod.Get] = \"Get\";\nRequestMethod[RequestMethod.Post] = \"Post\";\nRequestMethod[RequestMethod.Put] = \"Put\";\nRequestMethod[RequestMethod.Delete] = \"Delete\";\nRequestMethod[RequestMethod.Options] = \"Options\";\nRequestMethod[RequestMethod.Head] = \"Head\";\nRequestMethod[RequestMethod.Patch] = \"Patch\";\nlet ReadyState = {};\nReadyState.Unsent = 0;\nReadyState.Open = 1;\nReadyState.HeadersReceived = 2;\nReadyState.Loading = 3;\nReadyState.Done = 4;\nReadyState.Cancelled = 5;\nReadyState[ReadyState.Unsent] = \"Unsent\";\nReadyState[ReadyState.Open] = \"Open\";\nReadyState[ReadyState.HeadersReceived] = \"HeadersReceived\";\nReadyState[ReadyState.Loading] = \"Loading\";\nReadyState[ReadyState.Done] = \"Done\";\nReadyState[ReadyState.Cancelled] = \"Cancelled\";\nlet ResponseType = {};\nResponseType.Basic = 0;\nResponseType.Cors = 1;\nResponseType.Default = 2;\nResponseType.Error = 3;\nResponseType.Opaque = 4;\nResponseType[ResponseType.Basic] = \"Basic\";\nResponseType[ResponseType.Cors] = \"Cors\";\nResponseType[ResponseType.Default] = \"Default\";\nResponseType[ResponseType.Error] = \"Error\";\nResponseType[ResponseType.Opaque] = \"Opaque\";\nlet ContentType = {};\nContentType.NONE = 0;\nContentType.JSON = 1;\nContentType.FORM = 2;\nContentType.FORM_DATA = 3;\nContentType.TEXT = 4;\nContentType.BLOB = 5;\nContentType.ARRAY_BUFFER = 6;\nContentType[ContentType.NONE] = \"NONE\";\nContentType[ContentType.JSON] = \"JSON\";\nContentType[ContentType.FORM] = \"FORM\";\nContentType[ContentType.FORM_DATA] = \"FORM_DATA\";\nContentType[ContentType.TEXT] = \"TEXT\";\nContentType[ContentType.BLOB] = \"BLOB\";\nContentType[ContentType.ARRAY_BUFFER] = \"ARRAY_BUFFER\";\nlet ResponseContentType = {};\nResponseContentType.Text = 0;\nResponseContentType.Json = 1;\nResponseContentType.ArrayBuffer = 2;\nResponseContentType.Blob = 3;\nResponseContentType[ResponseContentType.Text] = \"Text\";\nResponseContentType[ResponseContentType.Json] = \"Json\";\nResponseContentType[ResponseContentType.ArrayBuffer] = \"ArrayBuffer\";\nResponseContentType[ResponseContentType.Blob] = \"Blob\";\n\n/**\n * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\n * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\n *\n * The only known difference between this `Headers` implementation and the spec is the\n * lack of an `entries` method.\n *\n * ### Example\n *\n * ```\n * import {Headers} from '\\@angular/http';\n *\n * var firstHeaders = new Headers();\n * firstHeaders.append('Content-Type', 'image/jpeg');\n * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n *\n * // Create headers from Plain Old JavaScript Object\n * var secondHeaders = new Headers({\n *   'X-My-Custom-Header': 'Angular'\n * });\n * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n *\n * var thirdHeaders = new Headers(secondHeaders);\n * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n * ```\n *\n * \\@experimental\n */\nclass Headers {\n    /**\n     * @param {?=} headers\n     */\n    constructor(headers) {\n        /**\n         * \\@internal header names are lower case\n         */\n        this._headers = new Map();\n        /**\n         * \\@internal map lower case names to actual names\n         */\n        this._normalizedNames = new Map();\n        if (!headers) {\n            return;\n        }\n        if (headers instanceof Headers) {\n            headers.forEach((values, name) => {\n                values.forEach(value => this.append(name, value));\n            });\n            return;\n        }\n        Object.keys(headers).forEach((name) => {\n            const values = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\n            this.delete(name);\n            values.forEach(value => this.append(name, value));\n        });\n    }\n    /**\n     * Returns a new Headers instance from the given DOMString of Response Headers\n     * @param {?} headersString\n     * @return {?}\n     */\n    static fromResponseHeaderString(headersString) {\n        const /** @type {?} */ headers = new Headers();\n        headersString.split('\\n').forEach(line => {\n            const /** @type {?} */ index = line.indexOf(':');\n            if (index > 0) {\n                const /** @type {?} */ name = line.slice(0, index);\n                const /** @type {?} */ value = line.slice(index + 1).trim();\n                headers.set(name, value);\n            }\n        });\n        return headers;\n    }\n    /**\n     * Appends a header to existing list of header values for a given header name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    append(name, value) {\n        const /** @type {?} */ values = this.getAll(name);\n        if (values === null) {\n            this.set(name, value);\n        }\n        else {\n            values.push(value);\n        }\n    }\n    /**\n     * Deletes all header values for the given name.\n     * @param {?} name\n     * @return {?}\n     */\n    delete(name) {\n        const /** @type {?} */ lcName = name.toLowerCase();\n        this._normalizedNames.delete(lcName);\n        this._headers.delete(lcName);\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEach(fn) {\n        this._headers.forEach((values, lcName) => fn(values, this._normalizedNames.get(lcName), this._headers));\n    }\n    /**\n     * Returns first header that matches given name.\n     * @param {?} name\n     * @return {?}\n     */\n    get(name) {\n        const /** @type {?} */ values = this.getAll(name);\n        if (values === null) {\n            return null;\n        }\n        return values.length > 0 ? values[0] : null;\n    }\n    /**\n     * Checks for existence of header by given name.\n     * @param {?} name\n     * @return {?}\n     */\n    has(name) { return this._headers.has(name.toLowerCase()); }\n    /**\n     * Returns the names of the headers\n     * @return {?}\n     */\n    keys() { return Array.from(this._normalizedNames.values()); }\n    /**\n     * Sets or overrides header value for given name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    set(name, value) {\n        if (Array.isArray(value)) {\n            if (value.length) {\n                this._headers.set(name.toLowerCase(), [value.join(',')]);\n            }\n        }\n        else {\n            this._headers.set(name.toLowerCase(), [value]);\n        }\n        this.mayBeSetNormalizedName(name);\n    }\n    /**\n     * Returns values of all headers.\n     * @return {?}\n     */\n    values() { return Array.from(this._headers.values()); }\n    /**\n     * @return {?}\n     */\n    toJSON() {\n        const /** @type {?} */ serialized = {};\n        this._headers.forEach((values, name) => {\n            const /** @type {?} */ split = [];\n            values.forEach(v => split.push(...v.split(',')));\n            serialized[((this._normalizedNames.get(name)))] = split;\n        });\n        return serialized;\n    }\n    /**\n     * Returns list of header values for a given name.\n     * @param {?} name\n     * @return {?}\n     */\n    getAll(name) {\n        return this.has(name) ? this._headers.get(name.toLowerCase()) || null : null;\n    }\n    /**\n     * This method is not implemented.\n     * @return {?}\n     */\n    entries() { throw new Error('\"entries\" method is not implemented on Headers class'); }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    mayBeSetNormalizedName(name) {\n        const /** @type {?} */ lcName = name.toLowerCase();\n        if (!this._normalizedNames.has(lcName)) {\n            this._normalizedNames.set(lcName, name);\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates a response options object to be optionally provided when instantiating a\n * {\\@link Response}.\n *\n * This class is based on the `ResponseInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#responseinit).\n *\n * All values are null by default. Typical defaults can be found in the\n * {\\@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\n *\n * This class may be used in tests to build {\\@link Response Responses} for\n * mock responses (see {\\@link MockBackend}).\n *\n * ### Example ([live demo](http://plnkr.co/edit/P9Jkk8e8cz6NVzbcxEsD?p=preview))\n *\n * ```typescript\n * import {ResponseOptions, Response} from '\\@angular/http';\n *\n * var options = new ResponseOptions({\n *   body: '{\"name\":\"Jeff\"}'\n * });\n * var res = new Response(options);\n *\n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * ```\n *\n * \\@experimental\n */\nclass ResponseOptions {\n    /**\n     * @param {?=} opts\n     */\n    constructor(opts = {}) {\n        const { body, status, headers, statusText, type, url } = opts;\n        this.body = body != null ? body : null;\n        this.status = status != null ? status : null;\n        this.headers = headers != null ? headers : null;\n        this.statusText = statusText != null ? statusText : null;\n        this.type = type != null ? type : null;\n        this.url = url != null ? url : null;\n    }\n    /**\n     * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n     * override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * This may be useful when sharing a base `ResponseOptions` object inside tests,\n     * where certain properties may change from test to test.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n     *\n     * ```typescript\n     * import {ResponseOptions, Response} from '\\@angular/http';\n     *\n     * var options = new ResponseOptions({\n     *   body: {name: 'Jeff'}\n     * });\n     * var res = new Response(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('options.url:', options.url); // null\n     * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n     * console.log('res.url:', res.url); // https://google.com\n     * ```\n     * @param {?=} options\n     * @return {?}\n     */\n    merge(options) {\n        return new ResponseOptions({\n            body: options && options.body != null ? options.body : this.body,\n            status: options && options.status != null ? options.status : this.status,\n            headers: options && options.headers != null ? options.headers : this.headers,\n            statusText: options && options.statusText != null ? options.statusText : this.statusText,\n            type: options && options.type != null ? options.type : this.type,\n            url: options && options.url != null ? options.url : this.url,\n        });\n    }\n}\n/**\n * Subclass of {\\@link ResponseOptions}, with default values.\n *\n * Default values:\n *  * status: 200\n *  * headers: empty {\\@link Headers} object\n *\n * This class could be extended and bound to the {\\@link ResponseOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create {\\@link Response Responses}.\n *\n * ### Example ([live demo](http://plnkr.co/edit/qv8DLT?p=preview))\n *\n * ```typescript\n * import {provide} from '\\@angular/core';\n * import {bootstrap} from '\\@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\n * '\\@angular/http';\n * import {App} from './myapp';\n *\n * class MyOptions extends BaseResponseOptions {\n *   headers:Headers = new Headers({network: 'github'});\n * }\n *\n * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\n * ```\n *\n * The options could also be extended when manually creating a {\\@link Response}\n * object.\n *\n * ### Example ([live demo](http://plnkr.co/edit/VngosOWiaExEtbstDoix?p=preview))\n *\n * ```\n * import {BaseResponseOptions, Response} from '\\@angular/http';\n *\n * var options = new BaseResponseOptions();\n * var res = new Response(options.merge({\n *   body: 'Angular',\n *   headers: new Headers({framework: 'angular'})\n * }));\n * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\n * console.log('res.text():', res.text()); // Angular;\n * ```\n *\n * \\@experimental\n */\nclass BaseResponseOptions extends ResponseOptions {\n    constructor() {\n        super({ status: 200, statusText: 'Ok', type: ResponseType.Default, headers: new Headers() });\n    }\n}\nBaseResponseOptions.decorators = [\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nBaseResponseOptions.ctorParameters = () => [];\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Abstract class from which real backends are derived.\n *\n * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given\n * {\\@link Request}.\n *\n * \\@experimental\n * @abstract\n */\nclass ConnectionBackend {\n    /**\n     * @abstract\n     * @param {?} request\n     * @return {?}\n     */\n    createConnection(request) { }\n}\n/**\n * Abstract class from which real connections are derived.\n *\n * \\@experimental\n * @abstract\n */\nclass Connection {\n}\n/**\n * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.\n *\n * \\@experimental\n * @abstract\n */\nclass XSRFStrategy {\n    /**\n     * @abstract\n     * @param {?} req\n     * @return {?}\n     */\n    configureRequest(req) { }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} method\n * @return {?}\n */\nfunction normalizeMethodName(method) {\n    if (typeof method !== 'string')\n        return method;\n    switch (method.toUpperCase()) {\n        case 'GET':\n            return RequestMethod.Get;\n        case 'POST':\n            return RequestMethod.Post;\n        case 'PUT':\n            return RequestMethod.Put;\n        case 'DELETE':\n            return RequestMethod.Delete;\n        case 'OPTIONS':\n            return RequestMethod.Options;\n        case 'HEAD':\n            return RequestMethod.Head;\n        case 'PATCH':\n            return RequestMethod.Patch;\n    }\n    throw new Error(`Invalid request method. The method \"${method}\" is not supported.`);\n}\nconst isSuccess = (status) => (status >= 200 && status < 300);\n/**\n * @param {?} xhr\n * @return {?}\n */\nfunction getResponseURL(xhr) {\n    if ('responseURL' in xhr) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * @param {?} input\n * @return {?}\n */\n\n/**\n * @param {?} input\n * @return {?}\n */\nfunction stringToArrayBuffer(input) {\n    const /** @type {?} */ view = new Uint16Array(input.length);\n    for (let /** @type {?} */ i = 0, /** @type {?} */ strLen = input.length; i < strLen; i++) {\n        view[i] = input.charCodeAt(i);\n    }\n    return view.buffer;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @param {?=} rawParams\n * @return {?}\n */\nfunction paramParser(rawParams = '') {\n    const /** @type {?} */ map = new Map();\n    if (rawParams.length > 0) {\n        const /** @type {?} */ params = rawParams.split('&');\n        params.forEach((param) => {\n            const /** @type {?} */ eqIdx = param.indexOf('=');\n            const [key, val] = eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)];\n            const /** @type {?} */ list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        });\n    }\n    return map;\n}\n/**\n * \\@experimental\n *\n */\nclass QueryEncoder {\n    /**\n     * @param {?} k\n     * @return {?}\n     */\n    encodeKey(k) { return standardEncoding(k); }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    encodeValue(v) { return standardEncoding(v); }\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction standardEncoding(v) {\n    return encodeURIComponent(v)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/gi, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';')\n        .replace(/%2B/gi, '+')\n        .replace(/%3D/gi, '=')\n        .replace(/%3F/gi, '?')\n        .replace(/%2F/gi, '/');\n}\n/**\n * Map-like representation of url search parameters, based on\n * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n * with several extensions for merging URLSearchParams objects:\n *   - setAll()\n *   - appendAll()\n *   - replaceAll()\n *\n * This class accepts an optional second parameter of ${\\@link QueryEncoder},\n * which is used to serialize parameters before making a request. By default,\n * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\n * and then un-encodes certain characters that are allowed to be part of the query\n * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\n *\n * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\n *\n * If the set of allowed query characters is not acceptable for a particular backend,\n * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\n *\n * ```\n * import {URLSearchParams, QueryEncoder} from '\\@angular/http';\n * class MyQueryEncoder extends QueryEncoder {\n *   encodeKey(k: string): string {\n *     return myEncodingFunction(k);\n *   }\n *\n *   encodeValue(v: string): string {\n *     return myEncodingFunction(v);\n *   }\n * }\n *\n * let params = new URLSearchParams('', new MyQueryEncoder());\n * ```\n * \\@experimental\n */\nclass URLSearchParams {\n    /**\n     * @param {?=} rawParams\n     * @param {?=} queryEncoder\n     */\n    constructor(rawParams = '', queryEncoder = new QueryEncoder()) {\n        this.rawParams = rawParams;\n        this.queryEncoder = queryEncoder;\n        this.paramsMap = paramParser(rawParams);\n    }\n    /**\n     * @return {?}\n     */\n    clone() {\n        const /** @type {?} */ clone = new URLSearchParams('', this.queryEncoder);\n        clone.appendAll(this);\n        return clone;\n    }\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    has(param) { return this.paramsMap.has(param); }\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    get(param) {\n        const /** @type {?} */ storedParam = this.paramsMap.get(param);\n        return Array.isArray(storedParam) ? storedParam[0] : null;\n    }\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    getAll(param) { return this.paramsMap.get(param) || []; }\n    /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n    set(param, val) {\n        if (val === void 0 || val === null) {\n            this.delete(param);\n            return;\n        }\n        const /** @type {?} */ list = this.paramsMap.get(param) || [];\n        list.length = 0;\n        list.push(val);\n        this.paramsMap.set(param, list);\n    }\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    setAll(searchParams) {\n        searchParams.paramsMap.forEach((value, param) => {\n            const /** @type {?} */ list = this.paramsMap.get(param) || [];\n            list.length = 0;\n            list.push(value[0]);\n            this.paramsMap.set(param, list);\n        });\n    }\n    /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n    append(param, val) {\n        if (val === void 0 || val === null)\n            return;\n        const /** @type {?} */ list = this.paramsMap.get(param) || [];\n        list.push(val);\n        this.paramsMap.set(param, list);\n    }\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    appendAll(searchParams) {\n        searchParams.paramsMap.forEach((value, param) => {\n            const /** @type {?} */ list = this.paramsMap.get(param) || [];\n            for (let /** @type {?} */ i = 0; i < value.length; ++i) {\n                list.push(value[i]);\n            }\n            this.paramsMap.set(param, list);\n        });\n    }\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    replaceAll(searchParams) {\n        searchParams.paramsMap.forEach((value, param) => {\n            const /** @type {?} */ list = this.paramsMap.get(param) || [];\n            list.length = 0;\n            for (let /** @type {?} */ i = 0; i < value.length; ++i) {\n                list.push(value[i]);\n            }\n            this.paramsMap.set(param, list);\n        });\n    }\n    /**\n     * @return {?}\n     */\n    toString() {\n        const /** @type {?} */ paramsList = [];\n        this.paramsMap.forEach((values, k) => {\n            values.forEach(v => paramsList.push(this.queryEncoder.encodeKey(k) + '=' + this.queryEncoder.encodeValue(v)));\n        });\n        return paramsList.join('&');\n    }\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    delete(param) { this.paramsMap.delete(param); }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * HTTP request body used by both {\\@link Request} and {\\@link Response}\n * https://fetch.spec.whatwg.org/#body\n * @abstract\n */\nclass Body {\n    /**\n     * Attempts to return body as parsed `JSON` object, or raises an exception.\n     * @return {?}\n     */\n    json() {\n        if (typeof this._body === 'string') {\n            return JSON.parse(/** @type {?} */ (this._body));\n        }\n        if (this._body instanceof ArrayBuffer) {\n            return JSON.parse(this.text());\n        }\n        return this._body;\n    }\n    /**\n     * Returns the body as a string, presuming `toString()` can be called on the response body.\n     *\n     * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n     * bytes in the buffer will be interpreted. Valid values are:\n     *\n     * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n     *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n     *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n     *   into consideration. This is the default behavior to avoid breaking apps, but should be\n     *   considered deprecated.\n     *\n     * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n     * @param {?=} encodingHint\n     * @return {?}\n     */\n    text(encodingHint = 'legacy') {\n        if (this._body instanceof URLSearchParams) {\n            return this._body.toString();\n        }\n        if (this._body instanceof ArrayBuffer) {\n            switch (encodingHint) {\n                case 'legacy':\n                    return String.fromCharCode.apply(null, new Uint16Array(/** @type {?} */ (this._body)));\n                case 'iso-8859':\n                    return String.fromCharCode.apply(null, new Uint8Array(/** @type {?} */ (this._body)));\n                default:\n                    throw new Error(`Invalid value for encodingHint: ${encodingHint}`);\n            }\n        }\n        if (this._body == null) {\n            return '';\n        }\n        if (typeof this._body === 'object') {\n            return JSON.stringify(this._body, null, 2);\n        }\n        return this._body.toString();\n    }\n    /**\n     * Return the body as an ArrayBuffer\n     * @return {?}\n     */\n    arrayBuffer() {\n        if (this._body instanceof ArrayBuffer) {\n            return (this._body);\n        }\n        return stringToArrayBuffer(this.text());\n    }\n    /**\n     * Returns the request's body as a Blob, assuming that body exists.\n     * @return {?}\n     */\n    blob() {\n        if (this._body instanceof Blob) {\n            return (this._body);\n        }\n        if (this._body instanceof ArrayBuffer) {\n            return new Blob([this._body]);\n        }\n        throw new Error('The request body isn\\'t either a blob or an array buffer');\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates `Response` instances from provided values.\n *\n * Though this object isn't\n * usually instantiated by end-users, it is the primary object interacted with when it comes time to\n * add data to a view.\n *\n * ### Example\n *\n * ```\n * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\n * ```\n *\n * The Response's interface is inspired by the Response constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\n * can be accessed many times. There are other differences in the implementation, but this is the\n * most significant.\n *\n * \\@experimental\n */\nclass Response extends Body {\n    /**\n     * @param {?} responseOptions\n     */\n    constructor(responseOptions) {\n        super();\n        this._body = responseOptions.body;\n        this.status = responseOptions.status;\n        this.ok = (this.status >= 200 && this.status <= 299);\n        this.statusText = responseOptions.statusText;\n        this.headers = responseOptions.headers;\n        this.type = responseOptions.type;\n        this.url = responseOptions.url;\n    }\n    /**\n     * @return {?}\n     */\n    toString() {\n        return `Response with status: ${this.status} ${this.statusText} for URL: ${this.url}`;\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet _nextRequestId = 0;\nconst JSONP_HOME = '__ng_jsonp__';\nlet _jsonpConnections = null;\n/**\n * @return {?}\n */\nfunction _getJsonpConnections() {\n    const /** @type {?} */ w = typeof window == 'object' ? window : {};\n    if (_jsonpConnections === null) {\n        _jsonpConnections = w[JSONP_HOME] = {};\n    }\n    return _jsonpConnections;\n}\nclass BrowserJsonp {\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    build(url) {\n        const /** @type {?} */ node = document.createElement('script');\n        node.src = url;\n        return node;\n    }\n    /**\n     * @return {?}\n     */\n    nextRequestID() { return `__req${_nextRequestId++}`; }\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    requestCallback(id) { return `${JSONP_HOME}.${id}.finished`; }\n    /**\n     * @param {?} id\n     * @param {?} connection\n     * @return {?}\n     */\n    exposeConnection(id, connection) {\n        const /** @type {?} */ connections = _getJsonpConnections();\n        connections[id] = connection;\n    }\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    removeConnection(id) {\n        const /** @type {?} */ connections = _getJsonpConnections();\n        connections[id] = null;\n    }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    send(node) { document.body.appendChild(/** @type {?} */ ((node))); }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    cleanup(node) {\n        if (node.parentNode) {\n            node.parentNode.removeChild(/** @type {?} */ ((node)));\n        }\n    }\n}\nBrowserJsonp.decorators = [\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nBrowserJsonp.ctorParameters = () => [];\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\n/**\n * Abstract base class for an in-flight JSONP request.\n *\n * \\@experimental\n * @abstract\n */\nclass JSONPConnection {\n    /**\n     * Callback called when the JSONP request completes, to notify the application\n     * of the new data.\n     * @abstract\n     * @param {?=} data\n     * @return {?}\n     */\n    finished(data) { }\n}\nclass JSONPConnection_ extends JSONPConnection {\n    /**\n     * @param {?} req\n     * @param {?} _dom\n     * @param {?=} baseResponseOptions\n     */\n    constructor(req, _dom, baseResponseOptions) {\n        super();\n        this._dom = _dom;\n        this.baseResponseOptions = baseResponseOptions;\n        this._finished = false;\n        if (req.method !== RequestMethod.Get) {\n            throw new TypeError(JSONP_ERR_WRONG_METHOD);\n        }\n        this.request = req;\n        this.response = new Observable((responseObserver) => {\n            this.readyState = ReadyState.Loading;\n            const id = this._id = _dom.nextRequestID();\n            _dom.exposeConnection(id, this);\n            // Workaround Dart\n            // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);\n            const callback = _dom.requestCallback(this._id);\n            let url = req.url;\n            if (url.indexOf('=JSONP_CALLBACK&') > -1) {\n                url = url.replace('=JSONP_CALLBACK&', `=${callback}&`);\n            }\n            else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {\n                url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + `=${callback}`;\n            }\n            const script = this._script = _dom.build(url);\n            const onLoad = (event) => {\n                if (this.readyState === ReadyState.Cancelled)\n                    return;\n                this.readyState = ReadyState.Done;\n                _dom.cleanup(script);\n                if (!this._finished) {\n                    let responseOptions = new ResponseOptions({ body: JSONP_ERR_NO_CALLBACK, type: ResponseType.Error, url });\n                    if (baseResponseOptions) {\n                        responseOptions = baseResponseOptions.merge(responseOptions);\n                    }\n                    responseObserver.error(new Response(responseOptions));\n                    return;\n                }\n                let responseOptions = new ResponseOptions({ body: this._responseData, url });\n                if (this.baseResponseOptions) {\n                    responseOptions = this.baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.next(new Response(responseOptions));\n                responseObserver.complete();\n            };\n            const onError = (error) => {\n                if (this.readyState === ReadyState.Cancelled)\n                    return;\n                this.readyState = ReadyState.Done;\n                _dom.cleanup(script);\n                let responseOptions = new ResponseOptions({ body: error.message, type: ResponseType.Error });\n                if (baseResponseOptions) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.error(new Response(responseOptions));\n            };\n            script.addEventListener('load', onLoad);\n            script.addEventListener('error', onError);\n            _dom.send(script);\n            return () => {\n                this.readyState = ReadyState.Cancelled;\n                script.removeEventListener('load', onLoad);\n                script.removeEventListener('error', onError);\n                this._dom.cleanup(script);\n            };\n        });\n    }\n    /**\n     * @param {?=} data\n     * @return {?}\n     */\n    finished(data) {\n        // Don't leak connections\n        this._finished = true;\n        this._dom.removeConnection(this._id);\n        if (this.readyState === ReadyState.Cancelled)\n            return;\n        this._responseData = data;\n    }\n}\n/**\n * A {\\@link ConnectionBackend} that uses the JSONP strategy of making requests.\n *\n * \\@experimental\n * @abstract\n */\nclass JSONPBackend extends ConnectionBackend {\n}\nclass JSONPBackend_ extends JSONPBackend {\n    /**\n     * @param {?} _browserJSONP\n     * @param {?} _baseResponseOptions\n     */\n    constructor(_browserJSONP, _baseResponseOptions) {\n        super();\n        this._browserJSONP = _browserJSONP;\n        this._baseResponseOptions = _baseResponseOptions;\n    }\n    /**\n     * @param {?} request\n     * @return {?}\n     */\n    createConnection(request) {\n        return new JSONPConnection_(request, this._browserJSONP, this._baseResponseOptions);\n    }\n}\nJSONPBackend_.decorators = [\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nJSONPBackend_.ctorParameters = () => [\n    { type: BrowserJsonp, },\n    { type: ResponseOptions, },\n];\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n * request.\n *\n * This class would typically not be created or interacted with directly inside applications, though\n * the {\\@link MockConnection} may be interacted with in tests.\n *\n * \\@experimental\n */\nclass XHRConnection {\n    /**\n     * @param {?} req\n     * @param {?} browserXHR\n     * @param {?=} baseResponseOptions\n     */\n    constructor(req, browserXHR, baseResponseOptions) {\n        this.request = req;\n        this.response = new Observable((responseObserver) => {\n            const _xhr = browserXHR.build();\n            _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);\n            if (req.withCredentials != null) {\n                _xhr.withCredentials = req.withCredentials;\n            }\n            // load event handler\n            const onLoad = () => {\n                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n                let status = _xhr.status === 1223 ? 204 : _xhr.status;\n                let body = null;\n                // HTTP 204 means no content\n                if (status !== 204) {\n                    // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n                    // response/responseType properties were introduced in ResourceLoader Level2 spec\n                    // (supported by IE10)\n                    body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;\n                    // Implicitly strip a potential XSSI prefix.\n                    if (typeof body === 'string') {\n                        body = body.replace(XSSI_PREFIX, '');\n                    }\n                }\n                // fix status code when it is 0 (0 status is undocumented).\n                // Occurs when accessing file resources or on Android 4.1 stock browser\n                // while retrieving files from application cache.\n                if (status === 0) {\n                    status = body ? 200 : 0;\n                }\n                const headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\n                // IE 9 does not provide the way to get URL of response\n                const url = getResponseURL(_xhr) || req.url;\n                const statusText = _xhr.statusText || 'OK';\n                let responseOptions = new ResponseOptions({ body, status, headers, statusText, url });\n                if (baseResponseOptions != null) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                const response = new Response(responseOptions);\n                response.ok = isSuccess(status);\n                if (response.ok) {\n                    responseObserver.next(response);\n                    // TODO(gdi2290): defer complete if array buffer until done\n                    responseObserver.complete();\n                    return;\n                }\n                responseObserver.error(response);\n            };\n            // error event handler\n            const onError = (err) => {\n                let responseOptions = new ResponseOptions({\n                    body: err,\n                    type: ResponseType.Error,\n                    status: _xhr.status,\n                    statusText: _xhr.statusText,\n                });\n                if (baseResponseOptions != null) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.error(new Response(responseOptions));\n            };\n            this.setDetectedContentType(req, _xhr);\n            if (req.headers == null) {\n                req.headers = new Headers();\n            }\n            if (!req.headers.has('Accept')) {\n                req.headers.append('Accept', 'application/json, text/plain, */*');\n            }\n            req.headers.forEach((values, name) => _xhr.setRequestHeader(name, values.join(',')));\n            // Select the correct buffer type to store the response\n            if (req.responseType != null && _xhr.responseType != null) {\n                switch (req.responseType) {\n                    case ResponseContentType.ArrayBuffer:\n                        _xhr.responseType = 'arraybuffer';\n                        break;\n                    case ResponseContentType.Json:\n                        _xhr.responseType = 'json';\n                        break;\n                    case ResponseContentType.Text:\n                        _xhr.responseType = 'text';\n                        break;\n                    case ResponseContentType.Blob:\n                        _xhr.responseType = 'blob';\n                        break;\n                    default:\n                        throw new Error('The selected responseType is not supported');\n                }\n            }\n            _xhr.addEventListener('load', onLoad);\n            _xhr.addEventListener('error', onError);\n            _xhr.send(this.request.getBody());\n            return () => {\n                _xhr.removeEventListener('load', onLoad);\n                _xhr.removeEventListener('error', onError);\n                _xhr.abort();\n            };\n        });\n    }\n    /**\n     * @param {?} req\n     * @param {?} _xhr\n     * @return {?}\n     */\n    setDetectedContentType(req /** TODO Request */, _xhr /** XMLHttpRequest */) {\n        // Skip if a custom Content-Type header is provided\n        if (req.headers != null && req.headers.get('Content-Type') != null) {\n            return;\n        }\n        // Set the detected content type\n        switch (req.contentType) {\n            case ContentType.NONE:\n                break;\n            case ContentType.JSON:\n                _xhr.setRequestHeader('content-type', 'application/json');\n                break;\n            case ContentType.FORM:\n                _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n                break;\n            case ContentType.TEXT:\n                _xhr.setRequestHeader('content-type', 'text/plain');\n                break;\n            case ContentType.BLOB:\n                const /** @type {?} */ blob = req.blob();\n                if (blob.type) {\n                    _xhr.setRequestHeader('content-type', blob.type);\n                }\n                break;\n        }\n    }\n}\n/**\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n * for more information on XSRF.\n *\n * Applications can configure custom cookie and header names by binding an instance of this class\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n * details.\n *\n * \\@experimental\n */\nclass CookieXSRFStrategy {\n    /**\n     * @param {?=} _cookieName\n     * @param {?=} _headerName\n     */\n    constructor(_cookieName = 'XSRF-TOKEN', _headerName = 'X-XSRF-TOKEN') {\n        this._cookieName = _cookieName;\n        this._headerName = _headerName;\n    }\n    /**\n     * @param {?} req\n     * @return {?}\n     */\n    configureRequest(req) {\n        const /** @type {?} */ xsrfToken = ÉµgetDOM().getCookie(this._cookieName);\n        if (xsrfToken) {\n            req.headers.set(this._headerName, xsrfToken);\n        }\n    }\n}\n/**\n * Creates {\\@link XHRConnection} instances.\n *\n * This class would typically not be used by end users, but could be\n * overridden if a different backend implementation should be used,\n * such as in a node backend.\n *\n * ### Example\n *\n * ```\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '\\@angular/http';\n * \\@Component({\n *   viewProviders: [\n *     HTTP_PROVIDERS,\n *     {provide: Http, useFactory: (backend, options) => {\n *       return new Http(backend, options);\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n * })\n * class MyComponent {\n *   constructor(http:Http) {\n *     http.request('people.json').subscribe(res => this.people = res.json());\n *   }\n * }\n * ```\n * \\@experimental\n */\nclass XHRBackend {\n    /**\n     * @param {?} _browserXHR\n     * @param {?} _baseResponseOptions\n     * @param {?} _xsrfStrategy\n     */\n    constructor(_browserXHR, _baseResponseOptions, _xsrfStrategy) {\n        this._browserXHR = _browserXHR;\n        this._baseResponseOptions = _baseResponseOptions;\n        this._xsrfStrategy = _xsrfStrategy;\n    }\n    /**\n     * @param {?} request\n     * @return {?}\n     */\n    createConnection(request) {\n        this._xsrfStrategy.configureRequest(request);\n        return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n    }\n}\nXHRBackend.decorators = [\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nXHRBackend.ctorParameters = () => [\n    { type: BrowserXhr, },\n    { type: ResponseOptions, },\n    { type: XSRFStrategy, },\n];\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates a request options object to be optionally provided when instantiating a\n * {\\@link Request}.\n *\n * This class is based on the `RequestInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\n *\n * All values are null by default. Typical defaults can be found in the {\\@link BaseRequestOptions}\n * class, which sub-classes `RequestOptions`.\n *\n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n *\n * const options = new RequestOptions({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * });\n * const req = new Request(options);\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // https://google.com\n * ```\n *\n * \\@experimental\n */\nclass RequestOptions {\n    /**\n     * @deprecated from 4.0.0. Use params instead.\n     * @return {?}\n     */\n    get search() { return this.params; }\n    /**\n     * @deprecated from 4.0.0. Use params instead.\n     * @param {?} params\n     * @return {?}\n     */\n    set search(params) { this.params = params; }\n    /**\n     * @param {?=} opts\n     */\n    constructor(opts = {}) {\n        const { method, headers, body, url, search, params, withCredentials, responseType } = opts;\n        this.method = method != null ? normalizeMethodName(method) : null;\n        this.headers = headers != null ? headers : null;\n        this.body = body != null ? body : null;\n        this.url = url != null ? url : null;\n        this.params = this._mergeSearchParams(params || search);\n        this.withCredentials = withCredentials != null ? withCredentials : null;\n        this.responseType = responseType != null ? responseType : null;\n    }\n    /**\n     * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * Note that `headers` and `search` will override existing values completely if present in\n     * the `options` object. If these values should be merged, it should be done prior to calling\n     * `merge` on the `RequestOptions` instance.\n     *\n     * ```typescript\n     * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n     *\n     * const options = new RequestOptions({\n     *   method: RequestMethod.Post\n     * });\n     * const req = new Request(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('req.method:', RequestMethod[req.method]); // Post\n     * console.log('options.url:', options.url); // null\n     * console.log('req.url:', req.url); // https://google.com\n     * ```\n     * @param {?=} options\n     * @return {?}\n     */\n    merge(options) {\n        return new RequestOptions({\n            method: options && options.method != null ? options.method : this.method,\n            headers: options && options.headers != null ? options.headers : new Headers(this.headers),\n            body: options && options.body != null ? options.body : this.body,\n            url: options && options.url != null ? options.url : this.url,\n            params: options && this._mergeSearchParams(options.params || options.search),\n            withCredentials: options && options.withCredentials != null ? options.withCredentials :\n                this.withCredentials,\n            responseType: options && options.responseType != null ? options.responseType :\n                this.responseType\n        });\n    }\n    /**\n     * @param {?=} params\n     * @return {?}\n     */\n    _mergeSearchParams(params) {\n        if (!params)\n            return this.params;\n        if (params instanceof URLSearchParams) {\n            return params.clone();\n        }\n        if (typeof params === 'string') {\n            return new URLSearchParams(params);\n        }\n        return this._parseParams(params);\n    }\n    /**\n     * @param {?=} objParams\n     * @return {?}\n     */\n    _parseParams(objParams = {}) {\n        const /** @type {?} */ params = new URLSearchParams();\n        Object.keys(objParams).forEach((key) => {\n            const /** @type {?} */ value = objParams[key];\n            if (Array.isArray(value)) {\n                value.forEach((item) => this._appendParam(key, item, params));\n            }\n            else {\n                this._appendParam(key, value, params);\n            }\n        });\n        return params;\n    }\n    /**\n     * @param {?} key\n     * @param {?} value\n     * @param {?} params\n     * @return {?}\n     */\n    _appendParam(key, value, params) {\n        if (typeof value !== 'string') {\n            value = JSON.stringify(value);\n        }\n        params.append(key, value);\n    }\n}\n/**\n * Subclass of {\\@link RequestOptions}, with default values.\n *\n * Default values:\n *  * method: {\\@link RequestMethod RequestMethod.Get}\n *  * headers: empty {\\@link Headers} object\n *\n * This class could be extended and bound to the {\\@link RequestOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create and send {\\@link Request Requests}.\n *\n * ```typescript\n * import {BaseRequestOptions, RequestOptions} from '\\@angular/http';\n *\n * class MyOptions extends BaseRequestOptions {\n *   search: string = 'coreTeam=true';\n * }\n *\n * {provide: RequestOptions, useClass: MyOptions};\n * ```\n *\n * The options could also be extended when manually creating a {\\@link Request}\n * object.\n *\n * ```\n * import {BaseRequestOptions, Request, RequestMethod} from '\\@angular/http';\n *\n * const options = new BaseRequestOptions();\n * const req = new Request(options.merge({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n *\n * \\@experimental\n */\nclass BaseRequestOptions extends RequestOptions {\n    constructor() { super({ method: RequestMethod.Get, headers: new Headers() }); }\n}\nBaseRequestOptions.decorators = [\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nBaseRequestOptions.ctorParameters = () => [];\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates `Request` instances from provided values.\n *\n * The Request's interface is inspired by the Request constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#request-class),\n * but is considered a static value whose body can be accessed many times. There are other\n * differences in the implementation, but this is the most significant.\n *\n * `Request` instances are typically created by higher-level classes, like {\\@link Http} and\n * {\\@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n * One such example is when creating services that wrap higher-level services, like {\\@link Http},\n * where it may be useful to generate a `Request` with arbitrary headers and search params.\n *\n * ```typescript\n * import {Injectable, Injector} from '\\@angular/core';\n * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '\\@angular/http';\n *\n * \\@Injectable()\n * class AutoAuthenticator {\n *   constructor(public http:Http) {}\n *   request(url:string) {\n *     return this.http.request(new Request({\n *       method: RequestMethod.Get,\n *       url: url,\n *       search: 'password=123'\n *     }));\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n * var authenticator = injector.get(AutoAuthenticator);\n * authenticator.request('people.json').subscribe(res => {\n *   //URL should have included '?password=123'\n *   console.log('people', res.json());\n * });\n * ```\n *\n * \\@experimental\n */\nclass Request extends Body {\n    /**\n     * @param {?} requestOptions\n     */\n    constructor(requestOptions) {\n        super();\n        // TODO: assert that url is present\n        const url = requestOptions.url;\n        this.url = requestOptions.url;\n        const paramsArg = requestOptions.params || requestOptions.search;\n        if (paramsArg) {\n            let params;\n            if (typeof paramsArg === 'object' && !(paramsArg instanceof URLSearchParams)) {\n                params = urlEncodeParams(paramsArg).toString();\n            }\n            else {\n                params = paramsArg.toString();\n            }\n            if (params.length > 0) {\n                let prefix = '?';\n                if (this.url.indexOf('?') != -1) {\n                    prefix = (this.url[this.url.length - 1] == '&') ? '' : '&';\n                }\n                // TODO: just delete search-query-looking string in url?\n                this.url = url + prefix + params;\n            }\n        }\n        this._body = requestOptions.body;\n        this.method = normalizeMethodName(requestOptions.method);\n        // TODO(jeffbcross): implement behavior\n        // Defaults to 'omit', consistent with browser\n        this.headers = new Headers(requestOptions.headers);\n        this.contentType = this.detectContentType();\n        this.withCredentials = requestOptions.withCredentials;\n        this.responseType = requestOptions.responseType;\n    }\n    /**\n     * Returns the content type enum based on header options.\n     * @return {?}\n     */\n    detectContentType() {\n        switch (this.headers.get('content-type')) {\n            case 'application/json':\n                return ContentType.JSON;\n            case 'application/x-www-form-urlencoded':\n                return ContentType.FORM;\n            case 'multipart/form-data':\n                return ContentType.FORM_DATA;\n            case 'text/plain':\n            case 'text/html':\n                return ContentType.TEXT;\n            case 'application/octet-stream':\n                return this._body instanceof ArrayBuffer$1 ? ContentType.ARRAY_BUFFER : ContentType.BLOB;\n            default:\n                return this.detectContentTypeFromBody();\n        }\n    }\n    /**\n     * Returns the content type of request's body based on its type.\n     * @return {?}\n     */\n    detectContentTypeFromBody() {\n        if (this._body == null) {\n            return ContentType.NONE;\n        }\n        else if (this._body instanceof URLSearchParams) {\n            return ContentType.FORM;\n        }\n        else if (this._body instanceof FormData) {\n            return ContentType.FORM_DATA;\n        }\n        else if (this._body instanceof Blob$1) {\n            return ContentType.BLOB;\n        }\n        else if (this._body instanceof ArrayBuffer$1) {\n            return ContentType.ARRAY_BUFFER;\n        }\n        else if (this._body && typeof this._body === 'object') {\n            return ContentType.JSON;\n        }\n        else {\n            return ContentType.TEXT;\n        }\n    }\n    /**\n     * Returns the request's body according to its type. If body is undefined, return\n     * null.\n     * @return {?}\n     */\n    getBody() {\n        switch (this.contentType) {\n            case ContentType.JSON:\n                return this.text();\n            case ContentType.FORM:\n                return this.text();\n            case ContentType.FORM_DATA:\n                return this._body;\n            case ContentType.TEXT:\n                return this.text();\n            case ContentType.BLOB:\n                return this.blob();\n            case ContentType.ARRAY_BUFFER:\n                return this.arrayBuffer();\n            default:\n                return null;\n        }\n    }\n}\n/**\n * @param {?} params\n * @return {?}\n */\nfunction urlEncodeParams(params) {\n    const /** @type {?} */ searchParams = new URLSearchParams();\n    Object.keys(params).forEach(key => {\n        const /** @type {?} */ value = params[key];\n        if (value && Array.isArray(value)) {\n            value.forEach(element => searchParams.append(key, element.toString()));\n        }\n        else {\n            searchParams.append(key, value.toString());\n        }\n    });\n    return searchParams;\n}\nconst noop = function () { };\nconst w = typeof window == 'object' ? window : noop;\nconst FormData = ((w) /** TODO #9100 */)['FormData'] || noop;\nconst Blob$1 = ((w) /** TODO #9100 */)['Blob'] || noop;\nconst ArrayBuffer$1 = ((w) /** TODO #9100 */)['ArrayBuffer'] || noop;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} backend\n * @param {?} request\n * @return {?}\n */\nfunction httpRequest(backend, request) {\n    return backend.createConnection(request).response;\n}\n/**\n * @param {?} defaultOpts\n * @param {?} providedOpts\n * @param {?} method\n * @param {?} url\n * @return {?}\n */\nfunction mergeOptions(defaultOpts, providedOpts, method, url) {\n    const /** @type {?} */ newOptions = defaultOpts;\n    if (providedOpts) {\n        // Hack so Dart can used named parameters\n        return (newOptions.merge(new RequestOptions({\n            method: providedOpts.method || method,\n            url: providedOpts.url || url,\n            search: providedOpts.search,\n            params: providedOpts.params,\n            headers: providedOpts.headers,\n            body: providedOpts.body,\n            withCredentials: providedOpts.withCredentials,\n            responseType: providedOpts.responseType\n        })));\n    }\n    return (newOptions.merge(new RequestOptions({ method, url })));\n}\n/**\n * Performs http requests using `XMLHttpRequest` as the default backend.\n *\n * `Http` is available as an injectable class, with methods to perform http requests. Calling\n * `request` returns an `Observable` which will emit a single {\\@link Response} when a\n * response is received.\n *\n * ### Example\n *\n * ```typescript\n * import {Http, HTTP_PROVIDERS} from '\\@angular/http';\n * import 'rxjs/add/operator/map'\n * \\@Component({\n *   selector: 'http-app',\n *   viewProviders: [HTTP_PROVIDERS],\n *   templateUrl: 'people.html'\n * })\n * class PeopleComponent {\n *   constructor(http: Http) {\n *     http.get('people.json')\n *       // Call map on the response observable to get the parsed people object\n *       .map(res => res.json())\n *       // Subscribe to the observable to get the parsed people object and attach it to the\n *       // component\n *       .subscribe(people => this.people = people);\n *   }\n * }\n * ```\n *\n *\n * ### Example\n *\n * ```\n * http.get('people.json').subscribe((res:Response) => this.people = res.json());\n * ```\n *\n * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\n * {\\@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\n * the {\\@link XHRBackend} provider, as in the following example:\n *\n * ### Example\n *\n * ```typescript\n * import {BaseRequestOptions, Http} from '\\@angular/http';\n * import {MockBackend} from '\\@angular/http/testing';\n * var injector = Injector.resolveAndCreate([\n *   BaseRequestOptions,\n *   MockBackend,\n *   {provide: Http, useFactory:\n *       function(backend, defaultOptions) {\n *         return new Http(backend, defaultOptions);\n *       },\n *       deps: [MockBackend, BaseRequestOptions]}\n * ]);\n * var http = injector.get(Http);\n * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\n * ```\n *\n * \\@experimental\n */\nclass Http {\n    /**\n     * @param {?} _backend\n     * @param {?} _defaultOptions\n     */\n    constructor(_backend, _defaultOptions) {\n        this._backend = _backend;\n        this._defaultOptions = _defaultOptions;\n    }\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {\\@link BaseRequestOptions} before performing the request.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    request(url, options) {\n        let /** @type {?} */ responseObservable;\n        if (typeof url === 'string') {\n            responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */ (url))));\n        }\n        else if (url instanceof Request) {\n            responseObservable = httpRequest(this._backend, url);\n        }\n        else {\n            throw new Error('First argument must be a url string or Request instance.');\n        }\n        return responseObservable;\n    }\n    /**\n     * Performs a request with `get` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    get(url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));\n    }\n    /**\n     * Performs a request with `post` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    post(url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Post, url)));\n    }\n    /**\n     * Performs a request with `put` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    put(url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Put, url)));\n    }\n    /**\n     * Performs a request with `delete` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    delete(url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));\n    }\n    /**\n     * Performs a request with `patch` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    patch(url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Patch, url)));\n    }\n    /**\n     * Performs a request with `head` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    head(url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));\n    }\n    /**\n     * Performs a request with `options` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    options(url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));\n    }\n}\nHttp.decorators = [\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nHttp.ctorParameters = () => [\n    { type: ConnectionBackend, },\n    { type: RequestOptions, },\n];\n/**\n * \\@experimental\n */\nclass Jsonp extends Http {\n    /**\n     * @param {?} backend\n     * @param {?} defaultOptions\n     */\n    constructor(backend, defaultOptions) {\n        super(backend, defaultOptions);\n    }\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {\\@link BaseRequestOptions} before performing the request.\n     *\n     * \\@security Regular XHR is the safest alternative to JSONP for most applications, and is\n     * supported by all current browsers. Because JSONP creates a `<script>` element with\n     * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n     * source could expose your application to XSS risks. Data exposed by JSONP may also be\n     * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n     * future security issues (e.g. content sniffing).  For more detail, see the\n     * [Security Guide](http://g.co/ng/security).\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    request(url, options) {\n        let /** @type {?} */ responseObservable;\n        if (typeof url === 'string') {\n            url =\n                new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */ (url)));\n        }\n        if (url instanceof Request) {\n            if (url.method !== RequestMethod.Get) {\n                throw new Error('JSONP requests must use GET request method.');\n            }\n            responseObservable = httpRequest(this._backend, url);\n        }\n        else {\n            throw new Error('First argument must be a url string or Request instance.');\n        }\n        return responseObservable;\n    }\n}\nJsonp.decorators = [\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nJsonp.ctorParameters = () => [\n    { type: ConnectionBackend, },\n    { type: RequestOptions, },\n];\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * The http module provides services to perform http requests. To get started, see the {@link Http}\n * class.\n */\n/**\n * @return {?}\n */\nfunction _createDefaultCookieXSRFStrategy() {\n    return new CookieXSRFStrategy();\n}\n/**\n * @param {?} xhrBackend\n * @param {?} requestOptions\n * @return {?}\n */\nfunction httpFactory(xhrBackend, requestOptions) {\n    return new Http(xhrBackend, requestOptions);\n}\n/**\n * @param {?} jsonpBackend\n * @param {?} requestOptions\n * @return {?}\n */\nfunction jsonpFactory(jsonpBackend, requestOptions) {\n    return new Jsonp(jsonpBackend, requestOptions);\n}\n/**\n * The module that includes http's providers\n *\n * \\@experimental\n */\nclass HttpModule {\n}\nHttpModule.decorators = [\n    { type: NgModule, args: [{\n                providers: [\n                    // TODO(pascal): use factory type annotations once supported in DI\n                    // issue: https://github.com/angular/angular/issues/3183\n                    { provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions] },\n                    BrowserXhr,\n                    { provide: RequestOptions, useClass: BaseRequestOptions },\n                    { provide: ResponseOptions, useClass: BaseResponseOptions },\n                    XHRBackend,\n                    { provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy },\n                ],\n            },] },\n];\n/**\n * @nocollapse\n */\nHttpModule.ctorParameters = () => [];\n/**\n * The module that includes jsonp's providers\n *\n * \\@experimental\n */\nclass JsonpModule {\n}\nJsonpModule.decorators = [\n    { type: NgModule, args: [{\n                providers: [\n                    // TODO(pascal): use factory type annotations once supported in DI\n                    // issue: https://github.com/angular/angular/issues/3183\n                    { provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions] },\n                    BrowserJsonp,\n                    { provide: RequestOptions, useClass: BaseRequestOptions },\n                    { provide: ResponseOptions, useClass: BaseResponseOptions },\n                    { provide: JSONPBackend, useClass: JSONPBackend_ },\n                ],\n            },] },\n];\n/**\n * @nocollapse\n */\nJsonpModule.ctorParameters = () => [];\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\n/**\n * \\@stable\n */\nconst VERSION = new Version('4.4.7');\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the http package.\n */\n\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BrowserXhr, JSONPBackend, JSONPConnection, CookieXSRFStrategy, XHRBackend, XHRConnection, BaseRequestOptions, RequestOptions, BaseResponseOptions, ResponseOptions, ReadyState, RequestMethod, ResponseContentType, ResponseType, Headers, Http, Jsonp, HttpModule, JsonpModule, Connection, ConnectionBackend, XSRFStrategy, Request, Response, QueryEncoder, URLSearchParams, VERSION, BrowserJsonp as Éµg, JSONPBackend_ as Éµa, Body as Éµf, _createDefaultCookieXSRFStrategy as Éµb, httpFactory as Éµc, jsonpFactory as Éµd };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}