{"ast":null,"code":"import { BrowserModule } from '@angular/platform-browser';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { JwtModule } from '@auth0/angular-jwt';\nimport { AppComponent } from './app.component';\nimport { NavbarComponent } from './components/navbar/navbar.component';\nimport { LoginComponent } from './components/login/login.component';\nimport { RegisterComponent } from './components/register/register.component';\nimport { HomeComponent } from './components/home/home.component';\nimport { DashboardComponent } from './components/dashboard/dashboard.component';\nimport { ValidateService } from './services/validate.service';\nimport { AuthService } from './services/auth.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@auth0/angular-jwt\";\nconst appRoutes = [{\n  path: '',\n  component: HomeComponent\n}, {\n  path: 'register',\n  component: RegisterComponent\n}, {\n  path: 'login',\n  component: LoginComponent\n}, {\n  path: 'dashboard',\n  component: DashboardComponent\n}];\nexport function tokenGetter() {\n  const token = localStorage.getItem('access_token'); // Replace 'access_token' with the key you use to store the token\n  return token;\n}\nexport class AppModule {\n  static #_ = this.ɵfac = function AppModule_Factory(t) {\n    return new (t || AppModule)();\n  };\n  static #_2 = this.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: AppModule,\n    bootstrap: [AppComponent]\n  });\n  static #_3 = this.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    providers: [ValidateService, AuthService],\n    imports: [BrowserModule, FormsModule, RouterModule.forRoot(appRoutes), HttpClientModule, JwtModule.forRoot({\n      config: {\n        tokenGetter: tokenGetter,\n        allowedDomains: ['example.com'],\n        disallowedRoutes: ['example.com/unprotected-route']\n      }\n    })]\n  });\n}\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(AppModule, {\n    declarations: [AppComponent, NavbarComponent, LoginComponent, RegisterComponent, HomeComponent, DashboardComponent],\n    imports: [BrowserModule, FormsModule, i1.RouterModule, HttpClientModule, i2.JwtModule]\n  });\n})();","map":{"version":3,"names":["BrowserModule","RouterModule","FormsModule","HttpClientModule","JwtModule","AppComponent","NavbarComponent","LoginComponent","RegisterComponent","HomeComponent","DashboardComponent","ValidateService","AuthService","appRoutes","path","component","tokenGetter","token","localStorage","getItem","AppModule","_","_2","bootstrap","_3","imports","forRoot","config","allowedDomains","disallowedRoutes","declarations","i1","i2"],"sources":["C:\\Users\\Montg\\Documents\\Final Year\\APDS\\POE\\POE\\Frontend\\angular-src\\src\\app\\app.module.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { RouterModule,Routes } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { JwtModule } from '@auth0/angular-jwt';\n\nimport { AppComponent } from './app.component';\nimport { NavbarComponent } from './components/navbar/navbar.component';\nimport { LoginComponent } from './components/login/login.component';\nimport { RegisterComponent } from './components/register/register.component';\nimport { HomeComponent } from './components/home/home.component';\nimport { DashboardComponent } from './components/dashboard/dashboard.component';\n\nimport { ValidateService } from './services/validate.service';\nimport { AuthService } from './services/auth.service';\n\nconst appRoutes: Routes = [\n  {path:'',component: HomeComponent},\n  {path:'register',component: RegisterComponent},\n  {path:'login',component: LoginComponent},\n  {path:'dashboard',component: DashboardComponent}\n]\n\nexport function tokenGetter() {\n  const token = localStorage.getItem('access_token'); // Replace 'access_token' with the key you use to store the token\n  return token;\n}\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    NavbarComponent,\n    LoginComponent,\n    RegisterComponent,\n    HomeComponent,\n    DashboardComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    RouterModule.forRoot(appRoutes),\n    HttpClientModule,\n    JwtModule.forRoot({\n      config: {\n        tokenGetter: tokenGetter, // Define your token getter function\n        allowedDomains: ['example.com'],\n        disallowedRoutes: ['example.com/unprotected-route']\n      }\n    })\n  ],\n  providers: [ValidateService,AuthService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n"],"mappings":"AACA,SAASA,aAAa,QAAQ,2BAA2B;AACzD,SAASC,YAAY,QAAe,iBAAiB;AACrD,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,SAASC,gBAAgB,QAAQ,sBAAsB;AACvD,SAASC,SAAS,QAAQ,oBAAoB;AAE9C,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,eAAe,QAAQ,sCAAsC;AACtE,SAASC,cAAc,QAAQ,oCAAoC;AACnE,SAASC,iBAAiB,QAAQ,0CAA0C;AAC5E,SAASC,aAAa,QAAQ,kCAAkC;AAChE,SAASC,kBAAkB,QAAQ,4CAA4C;AAE/E,SAASC,eAAe,QAAQ,6BAA6B;AAC7D,SAASC,WAAW,QAAQ,yBAAyB;;;;AAErD,MAAMC,SAAS,GAAW,CACxB;EAACC,IAAI,EAAC,EAAE;EAACC,SAAS,EAAEN;AAAa,CAAC,EAClC;EAACK,IAAI,EAAC,UAAU;EAACC,SAAS,EAAEP;AAAiB,CAAC,EAC9C;EAACM,IAAI,EAAC,OAAO;EAACC,SAAS,EAAER;AAAc,CAAC,EACxC;EAACO,IAAI,EAAC,WAAW;EAACC,SAAS,EAAEL;AAAkB,CAAC,CACjD;AAED,OAAM,SAAUM,WAAWA,CAAA;EACzB,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC;EACpD,OAAOF,KAAK;AACd;AA2BA,OAAM,MAAOG,SAAS;EAAA,QAAAC,CAAA,G;qBAATD,SAAS;EAAA;EAAA,QAAAE,EAAA,G;UAATF,SAAS;IAAAG,SAAA,GAFRlB,YAAY;EAAA;EAAA,QAAAmB,EAAA,G;eADb,CAACb,eAAe,EAACC,WAAW,CAAC;IAAAa,OAAA,GAZtCzB,aAAa,EACbE,WAAW,EACXD,YAAY,CAACyB,OAAO,CAACb,SAAS,CAAC,EAC/BV,gBAAgB,EAChBC,SAAS,CAACsB,OAAO,CAAC;MAChBC,MAAM,EAAE;QACNX,WAAW,EAAEA,WAAW;QACxBY,cAAc,EAAE,CAAC,aAAa,CAAC;QAC/BC,gBAAgB,EAAE,CAAC,+BAA+B;;KAErD,CAAC;EAAA;;;2EAKOT,SAAS;IAAAU,YAAA,GAvBlBzB,YAAY,EACZC,eAAe,EACfC,cAAc,EACdC,iBAAiB,EACjBC,aAAa,EACbC,kBAAkB;IAAAe,OAAA,GAGlBzB,aAAa,EACbE,WAAW,EAAA6B,EAAA,CAAA9B,YAAA,EAEXE,gBAAgB,EAAA6B,EAAA,CAAA5B,SAAA;EAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}