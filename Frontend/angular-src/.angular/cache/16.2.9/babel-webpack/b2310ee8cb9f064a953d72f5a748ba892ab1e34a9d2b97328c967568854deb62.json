{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar Observable_1 = require('../Observable');\nvar Subscriber_1 = require('../Subscriber');\nvar Subscription_1 = require('../Subscription');\nvar refCount_1 = require('../operators/refCount');\n/**\n * @class ConnectableObservable<T>\n */\nvar ConnectableObservable = function (_super) {\n  __extends(ConnectableObservable, _super);\n  function ConnectableObservable( /** @deprecated internal use only */source, /** @deprecated internal use only */subjectFactory) {\n    _super.call(this);\n    this.source = source;\n    this.subjectFactory = subjectFactory;\n    /** @deprecated internal use only */\n    this._refCount = 0;\n    this._isComplete = false;\n  }\n  /** @deprecated internal use only */\n  ConnectableObservable.prototype._subscribe = function (subscriber) {\n    return this.getSubject().subscribe(subscriber);\n  };\n  /** @deprecated internal use only */\n  ConnectableObservable.prototype.getSubject = function () {\n    var subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  };\n  ConnectableObservable.prototype.connect = function () {\n    var connection = this._connection;\n    if (!connection) {\n      this._isComplete = false;\n      connection = this._connection = new Subscription_1.Subscription();\n      connection.add(this.source.subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription_1.Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  };\n  ConnectableObservable.prototype.refCount = function () {\n    return refCount_1.refCount()(this);\n  };\n  return ConnectableObservable;\n}(Observable_1.Observable);\nexports.ConnectableObservable = ConnectableObservable;\nvar connectableProto = ConnectableObservable.prototype;\nexports.connectableObservableDescriptor = {\n  operator: {\n    value: null\n  },\n  _refCount: {\n    value: 0,\n    writable: true\n  },\n  _subject: {\n    value: null,\n    writable: true\n  },\n  _connection: {\n    value: null,\n    writable: true\n  },\n  _subscribe: {\n    value: connectableProto._subscribe\n  },\n  _isComplete: {\n    value: connectableProto._isComplete,\n    writable: true\n  },\n  getSubject: {\n    value: connectableProto.getSubject\n  },\n  connect: {\n    value: connectableProto.connect\n  },\n  refCount: {\n    value: connectableProto.refCount\n  }\n};\nvar ConnectableSubscriber = function (_super) {\n  __extends(ConnectableSubscriber, _super);\n  function ConnectableSubscriber(destination, connectable) {\n    _super.call(this, destination);\n    this.connectable = connectable;\n  }\n  ConnectableSubscriber.prototype._error = function (err) {\n    this._unsubscribe();\n    _super.prototype._error.call(this, err);\n  };\n  ConnectableSubscriber.prototype._complete = function () {\n    this.connectable._isComplete = true;\n    this._unsubscribe();\n    _super.prototype._complete.call(this);\n  };\n  /** @deprecated internal use only */\n  ConnectableSubscriber.prototype._unsubscribe = function () {\n    var connectable = this.connectable;\n    if (connectable) {\n      this.connectable = null;\n      var connection = connectable._connection;\n      connectable._refCount = 0;\n      connectable._subject = null;\n      connectable._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  };\n  return ConnectableSubscriber;\n}(Subject_1.SubjectSubscriber);\nvar RefCountOperator = function () {\n  function RefCountOperator(connectable) {\n    this.connectable = connectable;\n  }\n  RefCountOperator.prototype.call = function (subscriber, source) {\n    var connectable = this.connectable;\n    connectable._refCount++;\n    var refCounter = new RefCountSubscriber(subscriber, connectable);\n    var subscription = source.subscribe(refCounter);\n    if (!refCounter.closed) {\n      refCounter.connection = connectable.connect();\n    }\n    return subscription;\n  };\n  return RefCountOperator;\n}();\nvar RefCountSubscriber = function (_super) {\n  __extends(RefCountSubscriber, _super);\n  function RefCountSubscriber(destination, connectable) {\n    _super.call(this, destination);\n    this.connectable = connectable;\n  }\n  /** @deprecated internal use only */\n  RefCountSubscriber.prototype._unsubscribe = function () {\n    var connectable = this.connectable;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n    this.connectable = null;\n    var refCount = connectable._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n    connectable._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    var connection = this.connection;\n    var sharedConnection = connectable._connection;\n    this.connection = null;\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  };\n  return RefCountSubscriber;\n}(Subscriber_1.Subscriber);","map":{"version":3,"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","Subject_1","require","Observable_1","Subscriber_1","Subscription_1","refCount_1","ConnectableObservable","_super","source","subjectFactory","call","_refCount","_isComplete","_subscribe","subscriber","getSubject","subscribe","subject","_subject","isStopped","connect","connection","_connection","Subscription","add","ConnectableSubscriber","closed","EMPTY","refCount","Observable","exports","connectableProto","connectableObservableDescriptor","operator","value","writable","destination","connectable","_error","err","_unsubscribe","_complete","unsubscribe","SubjectSubscriber","RefCountOperator","refCounter","RefCountSubscriber","subscription","sharedConnection","Subscriber"],"sources":["C:/Users/Montg/Documents/Final Year/APDS/POE/POE/node_modules/rxjs/observable/ConnectableObservable.js"],"sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar Observable_1 = require('../Observable');\nvar Subscriber_1 = require('../Subscriber');\nvar Subscription_1 = require('../Subscription');\nvar refCount_1 = require('../operators/refCount');\n/**\n * @class ConnectableObservable<T>\n */\nvar ConnectableObservable = (function (_super) {\n    __extends(ConnectableObservable, _super);\n    function ConnectableObservable(/** @deprecated internal use only */ source, \n        /** @deprecated internal use only */ subjectFactory) {\n        _super.call(this);\n        this.source = source;\n        this.subjectFactory = subjectFactory;\n        /** @deprecated internal use only */ this._refCount = 0;\n        this._isComplete = false;\n    }\n    /** @deprecated internal use only */ ConnectableObservable.prototype._subscribe = function (subscriber) {\n        return this.getSubject().subscribe(subscriber);\n    };\n    /** @deprecated internal use only */ ConnectableObservable.prototype.getSubject = function () {\n        var subject = this._subject;\n        if (!subject || subject.isStopped) {\n            this._subject = this.subjectFactory();\n        }\n        return this._subject;\n    };\n    ConnectableObservable.prototype.connect = function () {\n        var connection = this._connection;\n        if (!connection) {\n            this._isComplete = false;\n            connection = this._connection = new Subscription_1.Subscription();\n            connection.add(this.source\n                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n            if (connection.closed) {\n                this._connection = null;\n                connection = Subscription_1.Subscription.EMPTY;\n            }\n            else {\n                this._connection = connection;\n            }\n        }\n        return connection;\n    };\n    ConnectableObservable.prototype.refCount = function () {\n        return refCount_1.refCount()(this);\n    };\n    return ConnectableObservable;\n}(Observable_1.Observable));\nexports.ConnectableObservable = ConnectableObservable;\nvar connectableProto = ConnectableObservable.prototype;\nexports.connectableObservableDescriptor = {\n    operator: { value: null },\n    _refCount: { value: 0, writable: true },\n    _subject: { value: null, writable: true },\n    _connection: { value: null, writable: true },\n    _subscribe: { value: connectableProto._subscribe },\n    _isComplete: { value: connectableProto._isComplete, writable: true },\n    getSubject: { value: connectableProto.getSubject },\n    connect: { value: connectableProto.connect },\n    refCount: { value: connectableProto.refCount }\n};\nvar ConnectableSubscriber = (function (_super) {\n    __extends(ConnectableSubscriber, _super);\n    function ConnectableSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    ConnectableSubscriber.prototype._error = function (err) {\n        this._unsubscribe();\n        _super.prototype._error.call(this, err);\n    };\n    ConnectableSubscriber.prototype._complete = function () {\n        this.connectable._isComplete = true;\n        this._unsubscribe();\n        _super.prototype._complete.call(this);\n    };\n    /** @deprecated internal use only */ ConnectableSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (connectable) {\n            this.connectable = null;\n            var connection = connectable._connection;\n            connectable._refCount = 0;\n            connectable._subject = null;\n            connectable._connection = null;\n            if (connection) {\n                connection.unsubscribe();\n            }\n        }\n    };\n    return ConnectableSubscriber;\n}(Subject_1.SubjectSubscriber));\nvar RefCountOperator = (function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = (function (_super) {\n    __extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    /** @deprecated internal use only */ RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        ///\n        // Compare the local RefCountSubscriber's connection Subscription to the\n        // connection Subscription on the shared ConnectableObservable. In cases\n        // where the ConnectableObservable source synchronously emits values, and\n        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n        // execution continues to here before the RefCountOperator has a chance to\n        // supply the RefCountSubscriber with the shared connection Subscription.\n        // For example:\n        // ```\n        // Observable.range(0, 10)\n        //   .publish()\n        //   .refCount()\n        //   .take(5)\n        //   .subscribe();\n        // ```\n        // In order to account for this case, RefCountSubscriber should only dispose\n        // the ConnectableObservable's shared connection Subscription if the\n        // connection Subscription exists, *and* either:\n        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n        //      Subscription yet, or,\n        //   b. RefCountSubscriber's connection Subscription reference is identical\n        //      to the shared connection Subscription\n        ///\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber_1.Subscriber));\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}